<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王志强(Wang Zhiqiang) 点滴生活</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhiqw.github.io/"/>
  <updated>2021-06-18T15:12:48.922Z</updated>
  <id>https://zhiqw.github.io/</id>
  
  <author>
    <name>ZhiQiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>easyswoole实现websocket</title>
    <link href="https://zhiqw.github.io/2021/06/18/php/easyswoole-websockey/"/>
    <id>https://zhiqw.github.io/2021/06/18/php/easyswoole-websockey/</id>
    <published>2021-06-18T15:09:00.000Z</published>
    <updated>2021-06-18T15:12:48.922Z</updated>
    
    <content type="html"><![CDATA[<p>easyswoole实现websocket的步骤解析</p><a id="more"></a><p>配置 Websocket服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#39;MAIN_SERVER&#39; &#x3D;&gt; [</span><br><span class="line">  &#39;SERVER_TYPE&#39; &#x3D;&gt; EASYSWOOLE_WEB_SOCKET_SERVER,</span><br><span class="line">  &#39;SETTING&#39; &#x3D;&gt; [</span><br><span class="line">    &#x2F;&#x2F; 该参数项为心跳检测，严格参考swoole 配置说明</span><br><span class="line">    &#39;heartbeat_check_interval&#39; &#x3D;&gt; 60,</span><br><span class="line">  ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>fd与uuid绑定类<code>App/Support/FdManager.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace App\Support;</span><br><span class="line">use EasySwoole\Component\Singleton;</span><br><span class="line">use Swoole\Table;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Class FdManager</span><br><span class="line"> * @package App\Support</span><br><span class="line"> *&#x2F;</span><br><span class="line">class FdManager</span><br><span class="line">&#123;</span><br><span class="line">    use Singleton;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @var Table</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private $fdUuid;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @var Table</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private $uuidFd;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * FdManager constructor.</span><br><span class="line">     * @param int $size</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function __construct(int $size &#x3D; 1024 * 256)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;fdUuid &#x3D; new Table($size);</span><br><span class="line">        $this-&gt;fdUuid-&gt;column(&#39;uuid&#39;, Table::TYPE_STRING, 25);</span><br><span class="line">        $this-&gt;fdUuid-&gt;create();</span><br><span class="line">        $this-&gt;uuidFd &#x3D; new Table($size);</span><br><span class="line">        $this-&gt;uuidFd-&gt;column(&#39;fd&#39;, Table::TYPE_INT, 10);</span><br><span class="line">        $this-&gt;uuidFd-&gt;create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * fd 绑定</span><br><span class="line">     * @param int $fd</span><br><span class="line">     * @param string $uuid</span><br><span class="line">     * @return mixed</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function bind(int $fd, $uuid)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO: Implement bind() method.</span><br><span class="line">        $this-&gt;fdUuid-&gt;set($fd, [&#39;uuid&#39; &#x3D;&gt; $uuid]);</span><br><span class="line">        $this-&gt;uuidFd-&gt;set($uuid, [&#39;fd&#39; &#x3D;&gt; $fd]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 删除fd绑定关系</span><br><span class="line">     * @param int $fd</span><br><span class="line">     * @return mixed</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function delete(int $fd)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO: Implement delete() method.</span><br><span class="line">        $uuid &#x3D; $this-&gt;fdUuid($fd);</span><br><span class="line">        if ($uuid) &#123;</span><br><span class="line">            $this-&gt;uuidFd-&gt;del($uuid);</span><br><span class="line">        &#125;</span><br><span class="line">        $this-&gt;fdUuid-&gt;del($fd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 通过fd找到绑定的uuid</span><br><span class="line">     * @param int $fd</span><br><span class="line">     * @return mixed</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function fdUuid(int $fd)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO: Implement fdUuid() method.</span><br><span class="line">        $ret &#x3D; $this-&gt;fdUuid-&gt;get($fd);</span><br><span class="line">        if ($ret) &#123;</span><br><span class="line">            return $ret[&#39;uuid&#39;];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 通过uuid找到fd</span><br><span class="line">     * @param  $uuid</span><br><span class="line">     * @return mixed</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function uuidFd($uuid)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO: Implement uuidFd() method.</span><br><span class="line">        $ret &#x3D; $this-&gt;uuidFd-&gt;get($uuid);</span><br><span class="line">        if ($ret) &#123;</span><br><span class="line">            return $ret[&#39;fd&#39;];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webscoekt 事件类<code>/App/WebSocket/WebSocketEvent.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace App\WebSocket;</span><br><span class="line">use App\Support\FdManager;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Class WebSocketEvent</span><br><span class="line"> * @package App\WebSocket</span><br><span class="line"> *&#x2F;</span><br><span class="line">class WebSocketEvent</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 握手事件</span><br><span class="line">     * 所有客户端建立连接时触发的方法</span><br><span class="line">     * @param \swoole_http_request $request</span><br><span class="line">     * @param \swoole_http_response $response</span><br><span class="line">     * @return bool</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function onHandShake(\swoole_http_request $request, \swoole_http_response $response)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;** 此处自定义握手规则 返回 false 时中止握手 *&#x2F;</span><br><span class="line">        if (!$this-&gt;customHandShake($request, $response)) &#123;</span><br><span class="line">            $response-&gt;end();</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;** 此处是  RFC规范中的WebSocket握手验证过程 必须执行 否则无法正确握手 *&#x2F;</span><br><span class="line">        if ($this-&gt;secWebsocketAccept($request, $response)) &#123;</span><br><span class="line">            $response-&gt;end();</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        $response-&gt;end();</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 关闭事件</span><br><span class="line">     * 所有客户端关闭时触发的方法</span><br><span class="line">     * @param \swoole_server $server</span><br><span class="line">     * @param int $fd</span><br><span class="line">     * @param int $reactorId</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function onClose(\swoole_server $server, int $fd, int $reactorId)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;** @var array $info *&#x2F;</span><br><span class="line">        $info &#x3D; $server-&gt;getClientInfo($fd);</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 判断此fd 是否是一个有效的 websocket 连接</span><br><span class="line">         * 参见 https:&#x2F;&#x2F;wiki.swoole.com&#x2F;wiki&#x2F;page&#x2F;490.html</span><br><span class="line">         *&#x2F;</span><br><span class="line">        if ($info &amp;&amp; $info[&#39;websocket_status&#39;] &#x3D;&#x3D;&#x3D; WEBSOCKET_STATUS_FRAME) &#123;</span><br><span class="line">            &#x2F;**</span><br><span class="line">             * 判断连接是否是 server 主动关闭</span><br><span class="line">             * 参见 https:&#x2F;&#x2F;wiki.swoole.com&#x2F;wiki&#x2F;page&#x2F;p-event&#x2F;onClose.html</span><br><span class="line">             *&#x2F;</span><br><span class="line">            if ($reactorId &lt; 0) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;删除绑定关系</span><br><span class="line">            FdManager::getInstance()-&gt;delete($fd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * RFC规范中的WebSocket握手验证过程</span><br><span class="line">     * 以下内容必须强制使用</span><br><span class="line">     *</span><br><span class="line">     * @param \swoole_http_request $request</span><br><span class="line">     * @param \swoole_http_response $response</span><br><span class="line">     * @return bool</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected function secWebsocketAccept(\swoole_http_request $request, \swoole_http_response $response): bool</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; ws rfc 规范中约定的验证过程</span><br><span class="line">        if (!isset($request-&gt;header[&#39;sec-websocket-key&#39;])) &#123;</span><br><span class="line">            &#x2F;&#x2F; 需要 Sec-WebSocket-Key 如果没有拒绝握手</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        if (0 &#x3D;&#x3D;&#x3D; preg_match(&#39;#^[+&#x2F;0-9A-Za-z]&#123;21&#125;[AQgw]&#x3D;&#x3D;$#&#39;, $request-&gt;header[&#39;sec-websocket-key&#39;])</span><br><span class="line">            || 16 !&#x3D;&#x3D; strlen(base64_decode($request-&gt;header[&#39;sec-websocket-key&#39;]))</span><br><span class="line">        ) &#123;</span><br><span class="line">            &#x2F;&#x2F;不接受握手</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        $key &#x3D; base64_encode(sha1($request-&gt;header[&#39;sec-websocket-key&#39;] . &#39;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&#39;, true));</span><br><span class="line">        $headers &#x3D; array(</span><br><span class="line">            &#39;Upgrade&#39; &#x3D;&gt; &#39;websocket&#39;,</span><br><span class="line">            &#39;Connection&#39; &#x3D;&gt; &#39;Upgrade&#39;,</span><br><span class="line">            &#39;Sec-WebSocket-Accept&#39; &#x3D;&gt; $key,</span><br><span class="line">            &#39;Sec-WebSocket-Version&#39; &#x3D;&gt; &#39;13&#39;,</span><br><span class="line">            &#39;KeepAlive&#39; &#x3D;&gt; &#39;off&#39;,</span><br><span class="line">        );</span><br><span class="line">        if (isset($request-&gt;header[&#39;sec-websocket-protocol&#39;])) &#123;</span><br><span class="line">            $headers[&#39;Sec-WebSocket-Protocol&#39;] &#x3D; $request-&gt;header[&#39;sec-websocket-protocol&#39;];</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 发送验证后的header</span><br><span class="line">        foreach ($headers as $key &#x3D;&gt; $val) &#123;</span><br><span class="line">            $response-&gt;header($key, $val);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 接受握手 还需要101状态码以切换状态</span><br><span class="line">        $response-&gt;status(101);</span><br><span class="line">        &#x2F;&#x2F; fd 和 uuid 进行绑定</span><br><span class="line">        FdManager::getInstance()-&gt;bind($request-&gt;fd, $request-&gt;get[&#39;uuid&#39;]);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 自定义握手事件</span><br><span class="line">     * @param \swoole_http_request $request</span><br><span class="line">     * @param \swoole_http_response $response</span><br><span class="line">     * @return bool</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private function customHandShake(\swoole_http_request $request, \swoole_http_response $response)</span><br><span class="line">    &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Webcoket解析类<code>App/WebSocket/WebSocketParser.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace App\WebSocket;</span><br><span class="line">use EasySwoole\Socket\AbstractInterface\ParserInterface;</span><br><span class="line">use EasySwoole\Socket\Bean\Caller;</span><br><span class="line">use EasySwoole\Socket\Bean\Response;</span><br><span class="line"></span><br><span class="line">class WebSocketParser implements ParserInterface</span><br><span class="line">&#123;</span><br><span class="line">    public function decode($raw, $client): ?Caller</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO: Implement decode() method.</span><br><span class="line">        $caller &#x3D; new Caller;</span><br><span class="line">        if ($raw !&#x3D;&#x3D; &#39;PING&#39;) &#123;</span><br><span class="line">            $payload &#x3D; json_decode($raw, true);</span><br><span class="line">            $class &#x3D; isset($payload[&#39;controller&#39;]) ? $payload[&#39;controller&#39;] : &#39;index&#39;;</span><br><span class="line">            $action &#x3D; isset($payload[&#39;action&#39;]) ? $payload[&#39;action&#39;] : &#39;actionNotFound&#39;;</span><br><span class="line">            $params &#x3D; isset($payload[&#39;params&#39;]) ? (array)$payload[&#39;params&#39;] : [];</span><br><span class="line">            $controllerClass &#x3D; &quot;\\App\\WebSocket\\Controller\\&quot; . ucfirst($class);</span><br><span class="line">            if (!class_exists($controllerClass)) $controllerClass &#x3D; &quot;\\App\\WebSocket\\Controller\\Index&quot;;</span><br><span class="line">            $caller-&gt;setClient($caller);</span><br><span class="line">            $caller-&gt;setControllerClass($controllerClass);</span><br><span class="line">            $caller-&gt;setAction($action);</span><br><span class="line">            $caller-&gt;setArgs($params);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F; 设置心跳执行的类和方法</span><br><span class="line">            $caller-&gt;setControllerClass(\App\WebSocket\Controller\Base::class);</span><br><span class="line">            $caller-&gt;setAction(&#39;heartbeat&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">        return $caller;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function encode(Response $response, $client): ?string</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO: Implement encode() method.</span><br><span class="line">        return $response-&gt;getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册 websocket服务 <code>EasySwooleEvent.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public static function mainServerCreate(EventRegister $register)</span><br><span class="line">&#123;</span><br><span class="line">        $conf &#x3D; new \EasySwoole\Socket\Config();</span><br><span class="line">        &#x2F;&#x2F;设置Dispatcher为WebSocket 模式</span><br><span class="line">        $conf-&gt;setType(\EasySwoole\Socket\Config::WEB_SOCKET);</span><br><span class="line">        try &#123;</span><br><span class="line">            $conf-&gt;setParser(new \App\WebSocket\WebSocketParser());&#x2F;&#x2F;设置解析器对象</span><br><span class="line">            $dispatch &#x3D; new \EasySwoole\Socket\Dispatcher($conf);&#x2F;&#x2F;创建Dispatcher对象并注入config对象</span><br><span class="line">        &#125; catch (\Exception $e) &#123;</span><br><span class="line">            Log::error($e-&gt;getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;给server注册相关事件在WebSocket模式下onMessage事件必须注册 并且交给Dispatcher对象处理</span><br><span class="line">        $register-&gt;set(EventRegister::onMessage, function (\swoole_websocket_server $server, \swoole_websocket_frame $frame) use ($dispatch) &#123;</span><br><span class="line">            $dispatch-&gt;dispatch($server, $frame-&gt;data, $frame);</span><br><span class="line">        &#125;);</span><br><span class="line">        $websocketEvent &#x3D; new \App\WebSocket\WebSocketEvent();</span><br><span class="line">        &#x2F;&#x2F;自定义握手事件</span><br><span class="line">        $register-&gt;set(EventRegister::onHandShake, function (\swoole_http_request $request, \swoole_http_response $response) use ($websocketEvent) &#123;</span><br><span class="line">            $websocketEvent-&gt;onHandShake($request, $response);</span><br><span class="line">        &#125;);</span><br><span class="line">        &#x2F;&#x2F;自定义关闭事件</span><br><span class="line">        $register-&gt;set(EventRegister::onClose, function (\swoole_server $server, int $fd, int $reactorId) use ($websocketEvent) &#123;</span><br><span class="line">            $websocketEvent-&gt;onClose($server, $fd, $reactorId);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建控制器目录，让easyswoole 的websocket服务像http服务那样调用方便</p><p>基类控制器<code>App/WebSocket/Controller/Base.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace App\WebSocket\Controller;</span><br><span class="line">use EasySwoole\Socket\AbstractInterface\Controller;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Class Base</span><br><span class="line"> * @package App\WebSocket\Controller</span><br><span class="line"> *&#x2F;</span><br><span class="line">class Base extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 心跳执行的方法</span><br><span class="line">     * 该方法建议 迁移到 基类控制器 Base 中</span><br><span class="line">     * 推荐使用 easyswoole 自带的websocket客户端调试</span><br><span class="line">     * http:&#x2F;&#x2F;www.easyswoole.com&#x2F;wstool.html</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function heartbeat()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;response()-&gt;setMessage(&#39;心跳 heartbeat&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @param string|null $actionName</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected function actionNotFound(?string $actionName)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;response()-&gt;setMessage($actionName . &#39; not find&#39;); &#x2F;&#x2F; 推送消息</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试控制器<code>App/WebSocket/Controller/Test.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace App\WebSocket\Controller;</span><br><span class="line">class Test extends Base</span><br><span class="line">&#123;</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $fd &#x3D; $this-&gt;caller()-&gt;getClient()-&gt;getFd();&#x2F;&#x2F; 请求用户的fd</span><br><span class="line">        $data &#x3D; $this-&gt;caller()-&gt;getArgs(); &#x2F;&#x2F; 获取请求参数</span><br><span class="line">   &#x2F;&#x2F;</span><br><span class="line">        \EasySwoole\EasySwoole\ServerManager::getInstance()-&gt;getSwooleServer()-&gt;worker_id</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;发送响应消息</span><br><span class="line">        $this-&gt;response()-&gt;setMessage(&quot;响应消息&quot;);</span><br><span class="line">       </span><br><span class="line">        $server &#x3D; ServerManager::getInstance()-&gt;getSwooleServer();</span><br><span class="line">        &#x2F;&#x2F;推送消息</span><br><span class="line">        $server-&gt;push($fd, “要推送的消息”);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;easyswoole实现websocket的步骤解析&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>PHP 获取文件的MimeType</title>
    <link href="https://zhiqw.github.io/2021/02/04/php/php-get-mimetype/"/>
    <id>https://zhiqw.github.io/2021/02/04/php/php-get-mimetype/</id>
    <published>2021-02-04T14:56:00.000Z</published>
    <updated>2021-06-18T14:22:11.537Z</updated>
    
    <content type="html"><![CDATA[<ul><li>本地路径获取</li><li>远程链接获取</li></ul><a id="more"></a><h1 id="本地路径获取"><a href="#本地路径获取" class="headerlink" title="本地路径获取"></a>本地路径获取</h1><h2 id="mime-content-type"><a href="#mime-content-type" class="headerlink" title="mime_content_type"></a>mime_content_type</h2><p>如果你的PHP版本是<code>&lt; 5.3</code> 的，可以直接使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo mime_content_type(&quot;a.jpg&quot;);</span><br></pre></td></tr></table></figure><blockquote><p>该方法在<code>PHP 5.3</code>就废弃了，如果仍想使用此函数，那么可以对php进行配置启用magic_mime扩展。</p></blockquote><h2 id="Fileinfo函数"><a href="#Fileinfo函数" class="headerlink" title="Fileinfo函数"></a>Fileinfo函数</h2><p>在<code>PHP 5.3</code>及以上版本，官方推荐使用<code>Fileinfo</code>函数来获取mime-type，需要开启file_info扩展。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$finfo    &#x3D; finfo_open(FILEINFO_MIME);</span><br><span class="line">$mimetype &#x3D; finfo_file($finfo, $filename);</span><br><span class="line">finfo_close($finfo);</span><br></pre></td></tr></table></figure><h2 id="image-type-to-mime-type"><a href="#image-type-to-mime-type" class="headerlink" title="image_type_to_mime_type():"></a>image_type_to_mime_type():</h2><p> 果需要判断MIME类型的文件只有图像文件，那么首先可以使用<code>exif_imagetype()</code>函数获取图像类型常量，再用<code>image_type_to_mime_type()</code>函数将图像类型常量转换成图片文件的MIME类型。 </p><blockquote><p> <em>注意：需要在php.ini中配置打开php_mbstring.dll(Windows需要)和extension=php_exif.dll。</em> </p></blockquote><h1 id="远程链接获取"><a href="#远程链接获取" class="headerlink" title="远程链接获取"></a>远程链接获取</h1><h2 id="get-headers"><a href="#get-headers" class="headerlink" title="get_headers():"></a>get_headers():</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$strUrl &#x3D; &quot;http:&#x2F;&#x2F;domian.com&#x2F;demo.png&quot;;</span><br><span class="line">$arrTmp &#x3D; get_headers($strUrl,true);</span><br><span class="line">$mime_type &#x3D; $arrTmp[&#39;Content-Type&#39;];</span><br></pre></td></tr></table></figure><h2 id="CURL"><a href="#CURL" class="headerlink" title="CURL"></a>CURL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$strUrl &#x3D; &quot;http:&#x2F;&#x2F;domian.com&#x2F;demo.png&quot;;</span><br><span class="line">$ch &#x3D; curl_init($strUrl);</span><br><span class="line">curl_setopt($ch,CURLOPT_HEADER,1);</span><br><span class="line">curl_setopt($ch,CURLOPT_NOBODY,1);</span><br><span class="line">curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);</span><br><span class="line">$tmp &#x3D; curl_exec($ch);</span><br><span class="line">&#x2F;&#x2F;$mime_type &#x3D; curl_getinfo($ch,CURLINFO_CONTENT_TYPE);</span><br><span class="line">curl_close($ch);</span><br><span class="line">preg_match(&#39;&#x2F;Content-Type:\s(.*)\s&#x2F;&#39;,$tmp,$arr);</span><br><span class="line">$mime_type &#x3D; $arr[1];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;本地路径获取&lt;/li&gt;
&lt;li&gt;远程链接获取&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="php" scheme="https://zhiqw.github.io/categories/php/"/>
    
    
  </entry>
  
  <entry>
    <title>响应状态码解释</title>
    <link href="https://zhiqw.github.io/2021/01/31/net/httpcode/"/>
    <id>https://zhiqw.github.io/2021/01/31/net/httpcode/</id>
    <published>2021-01-30T16:13:00.000Z</published>
    <updated>2021-06-18T14:22:11.536Z</updated>
    
    <content type="html"><![CDATA[<ul><li>2xx状态码</li><li>3xx状态码</li><li>4xx状态码</li><li>5xx状态码<a id="more"></a></li></ul><h3 id="201-206都表示服务器成功处理了请求的状态代码，说明网页可以正常访问。"><a href="#201-206都表示服务器成功处理了请求的状态代码，说明网页可以正常访问。" class="headerlink" title="201-206都表示服务器成功处理了请求的状态代码，说明网页可以正常访问。"></a>201-206都表示服务器成功处理了请求的状态代码，说明网页可以正常访问。</h3><p>200（成功） 服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。</p><p>201（已创建） 请求成功且服务器已创建了新的资源。</p><p>202（已接受） 服务器已接受了请求，但尚未对其进行处理。</p><p>203（非授权信息） 服务器已成功处理了请求，但返回了可能来自另一来源的信息。</p><p>204（无内容） 服务器成功处理了请求，但未返回任何内容。</p><p>205（重置内容） 服务器成功处理了请求，但未返回任何内容。与 204 响应不同，此响应要求请求者重置文档视图（例如清除表单内容以输入新内容）。</p><p>206（部分内容） 服务器成功处理了部分 GET 请求。</p><h3 id="300-307表示的意思是：要完成请求，您需要进一步进行操作。通常，这些状态代码是永远重定向的。"><a href="#300-307表示的意思是：要完成请求，您需要进一步进行操作。通常，这些状态代码是永远重定向的。" class="headerlink" title="300-307表示的意思是：要完成请求，您需要进一步进行操作。通常，这些状态代码是永远重定向的。"></a>300-307表示的意思是：要完成请求，您需要进一步进行操作。通常，这些状态代码是永远重定向的。</h3><p>300（多种选择） 服务器根据请求可执行多种操作。服务器可根据请求者 来选择一项操作，或提供操作列表供其选择。</p><p>301（永久移动） 请求的网页已被永久移动到新位置。服务器返回此响应时，会自动将请求者转到新位置。您应使用此代码通知搜索引擎蜘蛛网页或网站已被永久移动到新位置。</p><p>302（临时移动） 服务器目前正从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。会自动将请求者转到不同的位置。但由于搜索引擎会继续抓取原有位置并将其编入索引，因此您不应使用此代码来告诉搜索引擎页面或网站已被移动。</p><p>303（查看其他位置） 当请求者应对不同的位置进行单独的 GET 请求以检索响应时，服务器会返回此代码。对于除 HEAD 请求之外的所有请求，服务器会自动转到其他位置。</p><p>304（未修改） 自从上次请求后，请求的网页未被修改过。服务器返回此响应时，不会返回网页内容。<br>如果网页自请求者上次请求后再也没有更改过，您应当将服务器配置为返回此响应。由于服务器可以告诉 搜索引擎自从上次抓取后网页没有更改过，因此可节省带宽和开销。</p><p>305（使用代理） 请求者只能使用代理访问请求的网页。如果服务器返回此响应，那么，服务器还会指明请求者应当使用的代理。</p><p>307（临时重定向） 服务器目前正从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。会自动将请求者转到不同的位置。但由于搜索引擎会继续抓取原有位置并将其编入索引，因此您不应使用此代码来告诉搜索引擎某个页面或网站已被移动。</p><h3 id="4XXHTTP状态码表示请求可能出错，会妨碍服务器的处理。"><a href="#4XXHTTP状态码表示请求可能出错，会妨碍服务器的处理。" class="headerlink" title="4XXHTTP状态码表示请求可能出错，会妨碍服务器的处理。"></a>4XXHTTP状态码表示请求可能出错，会妨碍服务器的处理。</h3><p>400（错误请求） 服务器不理解请求的语法。</p><p>401（身份验证错误） 此页要求授权。您可能不希望将此网页纳入索引。</p><p>403（禁止） 服务器拒绝请求。</p><p>404（未找到） 服务器找不到请求的网页。例如，对于服务器上不存在的网页经常会返回此代码。</p><p>405（方法禁用） 禁用请求中指定的方法。</p><p>406（不接受） 无法使用请求的内容特性响应请求的网页。</p><p>407（需要代理授权） 此状态码与 401 类似，但指定请求者必须授权使用代理。如果服务器返回此响应，还表示请求者应当使用代理。</p><p>408（请求超时） 服务器等候请求时发生超时。</p><p>409（冲突） 服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息。服务器在响应与前一个请求相冲突的 PUT 请求时可能会返回此代码，以及两个请求的差异列表。</p><p>410（已删除） 请求的资源永久删除后，服务器返回此响应。该代码与 404（未找到）代码相似，但在资源以前存在而现在不存在的情况下，有时会用来替代 404 代码。如果资源已永久删除，您应当使用 301 指定资源的新位置。</p><p>411（需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。</p><p>412（未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。</p><p>413（请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</p><p>414（请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。</p><p>415（不支持的媒体类型） 请求的格式不受请求页面的支持。</p><p>416（请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态码。</p><p>417（未满足期望值） 服务器未满足”期望”请求标头字段的要求。</p><h3 id="500至505表示的意思是：服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。"><a href="#500至505表示的意思是：服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。" class="headerlink" title="500至505表示的意思是：服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。"></a>500至505表示的意思是：服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。</h3><p>500（服务器内部错误） 服务器遇到错误，无法完成请求。</p><p>501（尚未实施） 服务器不具备完成请求的功能。例如，当服务器无法识别请求方法时，服务器可能会返回此代码。</p><p>502（错误网关） 服务器作为网关或代理，从上游服务器收到了无效的响应。</p><p>503（服务不可用） 目前无法使用服务器（由于超载或进行停机维护）。通常，这只是一种暂时的状态。</p><p>504（网关超时） 服务器作为网关或代理，未及时从上游服务器接收请求。</p><p>505（HTTP的 版本不受支持） 服务器不支持请求中所使用的 HTTP 协议版本。</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;2xx状态码&lt;/li&gt;
&lt;li&gt;3xx状态码&lt;/li&gt;
&lt;li&gt;4xx状态码&lt;/li&gt;
&lt;li&gt;5xx状态码
    
    </summary>
    
    
      <category term="网络编程" scheme="https://zhiqw.github.io/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>windwos10查看wifi密码</title>
    <link href="https://zhiqw.github.io/2021/01/30/windwos/windwos10-cmd-wifi-info/"/>
    <id>https://zhiqw.github.io/2021/01/30/windwos/windwos10-cmd-wifi-info/</id>
    <published>2021-01-30T15:56:00.000Z</published>
    <updated>2021-06-18T14:22:11.538Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\admin&gt;netsh</span><br><span class="line">&#x2F;&#x2F; 检查自己连接过的WiFi</span><br><span class="line">netsh&gt;wlan show profile</span><br><span class="line">&#x2F;&#x2F; 查看指定wifi信息</span><br><span class="line">netsh&gt;wlan show profile WiFi名称 key&#x3D;clear</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="windwos" scheme="https://zhiqw.github.io/categories/windwos/"/>
    
    
  </entry>
  
  <entry>
    <title>acme.sh</title>
    <link href="https://zhiqw.github.io/2021/01/14/liunx/acme-sh/"/>
    <id>https://zhiqw.github.io/2021/01/14/liunx/acme-sh/</id>
    <published>2021-01-14T04:22:39.000Z</published>
    <updated>2021-06-18T14:22:11.535Z</updated>
    
    <content type="html"><![CDATA[<p>acme.sh 实现了 <code>acme</code> 协议, 可以从 letsencrypt 生成免费的证书.</p><p>主要步骤:</p><ol><li>安装 acme.sh</li><li>生成证书</li><li>copy 证书到 nginx/apache 或者其他服务</li><li>更新证书</li></ol><a id="more"></a><p>下面详细介绍.</p><h1 id="1-安装-acme-sh"><a href="#1-安装-acme-sh" class="headerlink" title="1. 安装 acme.sh"></a>1. 安装 acme.sh</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># sh 安装</span><br><span class="line">curl  https:&#x2F;&#x2F;get.acme.sh | sh</span><br><span class="line"></span><br><span class="line"># 源码安装</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;acmesh-official&#x2F;acme.sh.git</span><br><span class="line">cd .&#x2F;acme.sh</span><br><span class="line">.&#x2F;acme.sh --install</span><br><span class="line"></span><br><span class="line">#  创建 一个 bash 的 alias</span><br><span class="line">alias acme.sh&#x3D;~&#x2F;.acme.sh&#x2F;acme.sh</span><br></pre></td></tr></table></figure><h1 id="2-生成证书"><a href="#2-生成证书" class="headerlink" title="2. 生成证书"></a>2. 生成证书</h1><p>在生成之前，确保你的域名可以正常访问到webroot目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh  --issue -d www.zqw.xyz  --webroot  &#x2F;wwwroot&#x2F;zqw.xyz&#x2F;</span><br></pre></td></tr></table></figure><h1 id="3-copy-安装-证书"><a href="#3-copy-安装-证书" class="headerlink" title="3. copy/安装 证书"></a>3. copy/安装 证书</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;etc&#x2F;nginx&#x2F;ssl</span><br><span class="line"></span><br><span class="line">acme.sh --installcert -d www.zqw.xyz \</span><br><span class="line">--key-file &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;www.zqw.xyz.key \</span><br><span class="line">--fullchain-file &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;www.zqw.xyz.cer \</span><br><span class="line">--reloadcmd &quot;service nginx force-reload&quot;</span><br></pre></td></tr></table></figure><h1 id="4-更新证书"><a href="#4-更新证书" class="headerlink" title="4. 更新证书"></a>4. 更新证书</h1><p>目前证书在 60 天以后会自动更新, 你无需任何操作. 今后有可能会缩短这个时间, 不过都是自动的, 你不用关心.</p><blockquote><p>详细文档</p><p><a href="https://github.com/acmesh-official/acme.sh/wiki">https://github.com/acmesh-official/acme.sh/wiki</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;acme.sh 实现了 &lt;code&gt;acme&lt;/code&gt; 协议, 可以从 letsencrypt 生成免费的证书.&lt;/p&gt;
&lt;p&gt;主要步骤:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装 acme.sh&lt;/li&gt;
&lt;li&gt;生成证书&lt;/li&gt;
&lt;li&gt;copy 证书到 nginx/apache 或者其他服务&lt;/li&gt;
&lt;li&gt;更新证书&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>冷热分离</title>
    <link href="https://zhiqw.github.io/2020/12/29/database/cold-and-hot/"/>
    <id>https://zhiqw.github.io/2020/12/29/database/cold-and-hot/</id>
    <published>2020-12-29T03:05:00.000Z</published>
    <updated>2021-06-18T14:22:11.532Z</updated>
    
    <content type="html"><![CDATA[<ul><li>什么是冷热分离</li><li>什么情况下使用冷热分离</li><li>实现思路</li><li>如何触发冷热分离以及优缺点</li><li>如何实现</li><li>如何使用</li></ul><a id="more"></a><h2 id="什么是冷热分离"><a href="#什么是冷热分离" class="headerlink" title="什么是冷热分离"></a>什么是冷热分离</h2><p>就是数据分成冷库和热库2个库，冷库只存放那那些走到终态的数据，热库存放还需要去修改字段的数据</p><h2 id="什么情况下使用冷热分离"><a href="#什么情况下使用冷热分离" class="headerlink" title="什么情况下使用冷热分离"></a>什么情况下使用冷热分离</h2><ul><li>数据走到终态后，对数据只有读的没有写的需求，比如订单完结状态</li><li>用户能接受新旧数据分开查询，比如订单列表默认只能查询三个月内的订单，如果查询更早的状态，需要切换页面进行查询</li></ul><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><h3 id="如果判断数据到底是冷数据还是热数据"><a href="#如果判断数据到底是冷数据还是热数据" class="headerlink" title="如果判断数据到底是冷数据还是热数据"></a>如果判断数据到底是冷数据还是热数据</h3><p>   时间维度：在我们订单主表中一定会记录该订单的下单时间，我们可以将三个月之前的作为冷数据，三个月之内的数据作为热数据</p><p>   状态维度：我们可以将已完结的订单作为冷数据，其他作为热数据</p><p>   在实际工作中，我们可以根据<code>下单时间</code>和<code>订单状态</code>进行分离</p><h3 id="如何触发冷热分离以及优缺点"><a href="#如何触发冷热分离以及优缺点" class="headerlink" title="如何触发冷热分离以及优缺点"></a>如何触发冷热分离以及优缺点</h3><table><thead><tr><th></th><th>修改写操作业务逻辑</th><th>监听数据库变<code>binlog</code>更日志</th><th>定时扫描数据库</th></tr></thead><tbody><tr><td>优点</td><td>代码灵活可控 ；保证数据实时性</td><td>与业务代码解耦；可以做到低延时</td><td>与代码解耦；可以根据时间区分冷热数据的场景</td></tr><tr><td>缺点</td><td>不能按照时间区分冷热，当数据变成冷数据，期间可能没有其他任何操作；需要修改㕛数据库的写操作的代码</td><td>不能按照时间区分冷热，当数据变成冷数据，期间可能没有其他任何操作；需要考虑数据并发操作，就是业务代码与冷热变更代码同时操作同一个数据</td><td>不能做到实时</td></tr></tbody></table><p>   根据实际场景选择一个最优的方案，个人比较采用定时扫描的方案。</p><h3 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h3><p>   1）在热数据中，给要搬的数据添加一个标识</p><p>   2）找出待搬的数据，进行标记</p><p>   3）使用事务进行包裹，将冷的数据保存在冷库中</p><p>   4）删除原数据冷数据部分</p><blockquote><p>在实现的过程中，会遇到各种各样的问题都是值得我们深思熟虑</p><p>1.同时修改多个数据库，如何保证数据的一致性？</p><p>2.假设数据量大，一次性处理不完，该怎么办？是否需要使用批量处理？</p><p>3.假设数据量大到要分到多个地方并行处理，该怎么办？</p></blockquote><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>   一般都会有一个选项供我们选择需要查询冷数据还是热数据，如果界面上没有提供，我们可以直接在业务代码里区分。</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;什么是冷热分离&lt;/li&gt;
&lt;li&gt;什么情况下使用冷热分离&lt;/li&gt;
&lt;li&gt;实现思路&lt;/li&gt;
&lt;li&gt;如何触发冷热分离以及优缺点&lt;/li&gt;
&lt;li&gt;如何实现&lt;/li&gt;
&lt;li&gt;如何使用&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>docker环境下gitlab使用记录</title>
    <link href="https://zhiqw.github.io/2020/11/22/docker/gitlab/"/>
    <id>https://zhiqw.github.io/2020/11/22/docker/gitlab/</id>
    <published>2020-11-22T04:57:00.000Z</published>
    <updated>2021-06-18T14:22:11.533Z</updated>
    
    <content type="html"><![CDATA[<ul><li>docker运行gitlab</li><li>配置ssl</li><li>数据备份</li><li>数据还原</li><li>汉化</li></ul><a id="more"></a><h1 id="docker安装运行gitlab"><a href="#docker安装运行gitlab" class="headerlink" title="docker安装运行gitlab"></a>docker安装运行gitlab</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;data&#x2F;gitlab&#x2F;etc &#x2F;data&#x2F;gitlab&#x2F;logs  &#x2F;data&#x2F;gitlab&#x2F;data</span><br><span class="line"></span><br><span class="line">docker run --name gitlab \</span><br><span class="line">-p 8022:22 -p 8443:443 -p 8080:80 \</span><br><span class="line">--memory 4g \</span><br><span class="line">--restart always \</span><br><span class="line">-v &#x2F;data&#x2F;gitlab&#x2F;etc:&#x2F;etc&#x2F;gitlab \</span><br><span class="line">-v &#x2F;data&#x2F;gitlab&#x2F;logs:&#x2F;var&#x2F;log&#x2F;gitlab \</span><br><span class="line">-v &#x2F;data&#x2F;gitlab&#x2F;data:&#x2F;var&#x2F;opt&#x2F;gitlab \</span><br><span class="line">-d gitlab&#x2F;gitlab-ce:12.3.5-ce.0</span><br></pre></td></tr></table></figure><blockquote><p>–name 命令容器的名称</p><p>-d 报错容器后台持续运行</p><p>-p 暴露端口</p><p>-v 挂在目录</p></blockquote><h1 id="配置-GitLab-使用-HTTPS-协议"><a href="#配置-GitLab-使用-HTTPS-协议" class="headerlink" title="配置 GitLab 使用 HTTPS 协议"></a>配置 GitLab 使用 HTTPS 协议</h1><h2 id="挂在在容器中配置https"><a href="#挂在在容器中配置https" class="headerlink" title="挂在在容器中配置https"></a>挂在在容器中配置https</h2><p>修改配置文件<code>vim /data/gitlab/etc/gitlab.rb</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">###################################################</span><br><span class="line"># 添加外部请求的域名(如果不支持https, 可以改成http)</span><br><span class="line">external_url &#39;https:&#x2F;&#x2F;gitlab.example.com&#39;</span><br><span class="line"># 修改gitlab对应的时区 </span><br><span class="line">gitlab_rails[&#39;time_zone&#39;] &#x3D; &#39;PRC&#39;</span><br><span class="line"></span><br><span class="line"># 开启邮件支持 </span><br><span class="line">gitlab_rails[&#39;gitlab_email_enabled&#39;] &#x3D; true</span><br><span class="line">gitlab_rails[&#39;gitlab_email_from&#39;] &#x3D; &#39;gitlab@example.com&#39;</span><br><span class="line">gitlab_rails[&#39;gitlab_email_display_name&#39;] &#x3D; &#39;GitLab&#39;</span><br><span class="line"></span><br><span class="line"># 配置邮件参数</span><br><span class="line">gitlab_rails[&#39;smtp_enable&#39;] &#x3D; true</span><br><span class="line">gitlab_rails[&#39;smtp_address&#39;] &#x3D; &quot;smtp.163.com&quot;</span><br><span class="line">gitlab_rails[&#39;smtp_port&#39;] &#x3D; 25</span><br><span class="line">gitlab_rails[&#39;smtp_user_name&#39;] &#x3D; &quot;gitlab@example.com&quot;</span><br><span class="line">gitlab_rails[&#39;smtp_password&#39;] &#x3D; &quot;xxxxxx&quot;</span><br><span class="line">gitlab_rails[&#39;smtp_domain&#39;] &#x3D; &quot;domian.com&quot;</span><br><span class="line">gitlab_rails[&#39;smtp_authentication&#39;] &#x3D; &quot;login&quot;</span><br><span class="line">gitlab_rails[&#39;smtp_enable_starttls_auto&#39;] &#x3D; true</span><br><span class="line">gitlab_rails[&#39;smtp_tls&#39;] &#x3D; false        </span><br><span class="line">###################################################</span><br><span class="line"></span><br><span class="line">#SSL密钥相关配置#</span><br><span class="line">nginx[&#39;redirect_http_to_https&#39;] &#x3D; true</span><br><span class="line">nginx[&#39;ssl_certificate&#39;] &#x3D; &quot;&#x2F;data&#x2F;gitlab&#x2F;ssl&#x2F;gitlab.example.com.crt&quot;</span><br><span class="line">nginx[&#39;ssl_certificate_key&#39;] &#x3D; &quot;&#x2F;data&#x2F;gitlab&#x2F;ssl&#x2F;gitlab.example.com.key&quot;</span><br></pre></td></tr></table></figure><p>配置https主要修改参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 域名(https:&#x2F;&#x2F;)</span><br><span class="line">external_url &#39;https:&#x2F;&#x2F;gitlab.example.com&#39;</span><br><span class="line"># http重定向到https</span><br><span class="line">nginx[&#39;redirect_http_to_https&#39;] &#x3D; true</span><br><span class="line">nginx[&#39;ssl_certificate&#39;] &#x3D; &quot;&#x2F;data&#x2F;gitlab&#x2F;ssl&#x2F;gitlab.example.com.crt&quot;</span><br><span class="line">nginx[&#39;ssl_certificate_key&#39;] &#x3D; &quot;&#x2F;data&#x2F;gitlab&#x2F;ssl&#x2F;gitlab.example.com.key&quot;</span><br></pre></td></tr></table></figure><p>修改配置文件就需要进行重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line">docker restart gitlab</span><br></pre></td></tr></table></figure><h2 id="挂在在宿主nginx上配置https"><a href="#挂在在宿主nginx上配置https" class="headerlink" title="挂在在宿主nginx上配置https"></a>挂在在宿主nginx上配置https</h2><p>配置文件修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 禁用&#96;gitlab&#96;内置的&#96;nginx&#96;</span><br><span class="line">nginx[&#39;enable&#39;] &#x3D; false</span><br><span class="line"># 修改成与&#96;nginx&#96;运行时的用户一致</span><br><span class="line">web_server[&#39;external_users&#39;] &#x3D; [&#39;root&#39;]</span><br><span class="line"># 监听方式为 tcp</span><br><span class="line">gitlab_workhorse[&#39;listen_network&#39;] &#x3D; &quot;tcp&quot;</span><br><span class="line"># 下面的192.168.1.24为本机IP，根据实际情况修改，不能为 localhost 或者 127.0.0.1，否则 docker 访问不到，8181是默认监听的端口</span><br><span class="line">gitlab_workhorse[&#39;listen_addr&#39;] &#x3D; &quot;192.168.1.24:8181&quot;</span><br></pre></td></tr></table></figure><p>修改完配置重启容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec gitlab gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line">docker restart gitlab</span><br></pre></td></tr></table></figure><p>宿主nginx 配置文件<code>gitlab.conf</code>  </p><blockquote><p>参考：<a href="https://gitlab.com/gitlab-org/gitlab-recipes/tree/master/web-server/nginx">https://gitlab.com/gitlab-org/gitlab-recipes/tree/master/web-server/nginx</a></p></blockquote><p>需要修改地方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream gitlab-workhorse &#123;</span><br><span class="line">  server unix:&#x2F;data&#x2F;gitlab&#x2F;data&#x2F;gitlab-workhorse&#x2F;socket fail_timeout&#x3D;0;</span><br><span class="line">&#125;</span><br><span class="line">server_name gitlab.example.com;</span><br></pre></td></tr></table></figure><h1 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -t gitlab gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><p>命令执行成功后会在 gitlab 容器目录 /var/opt/gitlab/backups 生产文件</p><h1 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h1><blockquote><p>确定gitlab版本是否一致</p><p>确保将备份备份文件放在 /var/opt/gitlab/backups目录下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 停止相关数据连接服务</span><br><span class="line">gitlab-ctl stop unicorn</span><br><span class="line">gitlab-ctl stop sidekiq</span><br><span class="line"># 验证是全部停止</span><br><span class="line">gitlab-ctl status</span><br><span class="line"></span><br><span class="line">#恢复数据</span><br><span class="line">gitlab-rake gitlab:backup:restore BACKUP&#x3D;1549850985_2019_02_11_11.4.5</span><br><span class="line"># 启动Gitlab</span><br><span class="line">gitlab-ctl start</span><br></pre></td></tr></table></figure><h1 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h1><blockquote><p><a href="https://gitlab.com/xhang/gitlab">https://gitlab.com/xhang/gitlab</a></p><p>确定版本之后在进行操作</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 确定安装的版本</span><br><span class="line">cat &#x2F;opt&#x2F;gitlab&#x2F;embedded&#x2F;service&#x2F;gitlab-rails&#x2F;VERSION</span><br><span class="line"></span><br><span class="line"># 下载汉化包</span><br><span class="line">wget https:&#x2F;&#x2F;gitlab.com&#x2F;xhang&#x2F;gitlab&#x2F;-&#x2F;archive&#x2F;v12.3.5-zh&#x2F;gitlab-v12.3.5-zh.tar.gz</span><br><span class="line"># 解压汉化包</span><br><span class="line">tar -xvf gitlab-v12.3.5-zh.tar.gz</span><br><span class="line"># 将汉化文件覆盖掉原文件</span><br><span class="line">cp -rf gitlab-v12.3.5-zh&#x2F;* &#x2F;opt&#x2F;gitlab&#x2F;embedded&#x2F;service&#x2F;gitlab-rails&#x2F;</span><br><span class="line"># Docker安装需要清理临时的一些文</span><br><span class="line">rm -rf &#x2F;opt&#x2F;gitlab&#x2F;embedded&#x2F;nodes&#x2F;*</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;docker运行gitlab&lt;/li&gt;
&lt;li&gt;配置ssl&lt;/li&gt;
&lt;li&gt;数据备份&lt;/li&gt;
&lt;li&gt;数据还原&lt;/li&gt;
&lt;li&gt;汉化&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://zhiqw.github.io/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>docker环境下solr使用记录</title>
    <link href="https://zhiqw.github.io/2020/11/22/docker/solr/"/>
    <id>https://zhiqw.github.io/2020/11/22/docker/solr/</id>
    <published>2020-11-21T17:27:00.000Z</published>
    <updated>2021-06-18T14:22:11.534Z</updated>
    
    <content type="html"><![CDATA[<ul><li>solr环境运行</li><li>导入mysql数据</li></ul><a id="more"></a><h1 id="安装solr并创建core"><a href="#安装solr并创建core" class="headerlink" title="安装solr并创建core"></a>安装solr并创建core</h1><h2 id="下载指定solr版本"><a href="#下载指定solr版本" class="headerlink" title="下载指定solr版本"></a>下载指定solr版本</h2><p><a href="https://hub.docker.com/_/solr?tab=tags">https://hub.docker.com/_/solr?tab=tags</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull solr:6.6.6</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name solr -p 8983:8983 -d solr</span><br></pre></td></tr></table></figure><h2 id="创建-solr-的-core"><a href="#创建-solr-的-core" class="headerlink" title="创建 solr 的 core"></a>创建 solr 的 core</h2><p>访问 <code>http://localhost:8983/solr/#/~cores/new_core</code> 点击 <code>Add Core</code>，输入<code>name,instanceDir</code>，这时候会弹出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error CREATEing SolrCore &#39;new_core&#39;: Unable to create core [new_core] Caused by: Can&#39;t find resource &#39;solrconfig.xml&#39; in classpath or &#39;&#x2F;opt&#x2F;solr&#x2F;server&#x2F;solr&#x2F;new_core&#39;</span><br></pre></td></tr></table></figure><p>解决方案：将默认的配置信息拷贝到new_core目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -d solr mkdir -p  &#x2F;opt&#x2F;solr&#x2F;server&#x2F;solr&#x2F;new_core</span><br><span class="line">docker exec -d solr cp -r &#x2F;opt&#x2F;solr&#x2F;server&#x2F;solr&#x2F;configsets&#x2F;sample_techproducts_configs&#x2F;conf&#x2F;   &#x2F;opt&#x2F;solr&#x2F;server&#x2F;solr&#x2F;new_core</span><br></pre></td></tr></table></figure><h2 id="重启镜像"><a href="#重启镜像" class="headerlink" title="重启镜像"></a>重启镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart solr</span><br></pre></td></tr></table></figure><h1 id="mysql数据导入到solr中"><a href="#mysql数据导入到solr中" class="headerlink" title="mysql数据导入到solr中"></a>mysql数据导入到solr中</h1><h2 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec -d solr  wget  -P &#x2F;opt&#x2F;solr&#x2F;server&#x2F;solr-webapp&#x2F;webapp&#x2F;WEB-INF&#x2F;lib  https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#x2F;mysql&#x2F;mysql-connector-java&#x2F;5.1.9&#x2F;mysql-connector-java-5.1.9.jar</span><br><span class="line"></span><br><span class="line">docker exec -d solr  cp  &#x2F;opt&#x2F;solr&#x2F;dist&#x2F;solr-dataimporthandler-6.6.6.jar  &#x2F;opt&#x2F;solr&#x2F;server&#x2F;solr-webapp&#x2F;webapp&#x2F;WEB-INF&#x2F;lib</span><br></pre></td></tr></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp solr:&#x2F;opt&#x2F;solr&#x2F;server&#x2F;solr&#x2F;new_core&#x2F;conf&#x2F;solrconfig.xml .</span><br><span class="line">vim solrconfig.xml</span><br></pre></td></tr></table></figure><p>在<code>/opt/solr/server/solr/new_core/solrconfig.xml</code> 的<code>&lt;config&gt;&lt;/config&gt;</code>标签里添加下面内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;requestHandler name&#x3D;&quot;&#x2F;dataimport&quot; class&#x3D;&quot;org.apache.solr.handler.dataimport.DataImportHandler&quot;&gt;</span><br><span class="line">    &lt;lst name&#x3D;&quot;defaults&quot;&gt;</span><br><span class="line">        &lt;str name&#x3D;&quot;config&quot;&gt;data-config.xml&lt;&#x2F;str&gt;</span><br><span class="line">    &lt;&#x2F;lst&gt;</span><br><span class="line">&lt;&#x2F;requestHandler&gt;</span><br></pre></td></tr></table></figure><p>添加完成之后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp solrconfig.xml solr:&#x2F;opt&#x2F;solr&#x2F;server&#x2F;solr&#x2F;new_core&#x2F;conf&#x2F;solrconfig.xml</span><br></pre></td></tr></table></figure><p>在同一个目录下面新建一个 data-config.xml 并写入下面内容，这里 column 是指数据库中的列明，name 是指solr中显示的名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dataConfig&gt;</span><br><span class="line">    &lt;dataSource name&#x3D;&quot;user&quot; type&#x3D;&quot;JdbcDataSource&quot; driver&#x3D;&quot;com.mysql.jdbc.Driver&quot; url&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;hexo&quot; user&#x3D;&quot;root&quot; password&#x3D;&quot;123456&quot;&#x2F;&gt;</span><br><span class="line">    &lt;document&gt;</span><br><span class="line">        &lt;entity name&#x3D;&quot;user&quot;  query&#x3D;&quot;select * from user&quot;  dataSource&#x3D;&quot;source&quot; &gt;</span><br><span class="line">            &lt;field column&#x3D;&quot;db_name&quot; name&#x3D;&quot;name&quot; &#x2F;&gt;</span><br><span class="line">            &lt;field column&#x3D;&quot;db_password&quot; name&#x3D;&quot;password&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;entity&gt;</span><br><span class="line">    &lt;&#x2F;document&gt;</span><br><span class="line">&lt;&#x2F;dataConfig&gt;</span><br></pre></td></tr></table></figure><p>我是在宿主进行编辑需要拷贝到容器中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp data-config.xml solr:&#x2F;opt&#x2F;solr&#x2F;server&#x2F;solr&#x2F;new_core&#x2F;conf&#x2F;</span><br></pre></td></tr></table></figure><h2 id="mysql同步最后一步"><a href="#mysql同步最后一步" class="headerlink" title="mysql同步最后一步"></a>mysql同步最后一步</h2><p>访问 <code>http://localhost:8983/solr/#/new_core/schema</code><br>点击 <code>Add Field</code>:<br>在 <code>db_name</code>输入<code>db_name</code> 在<code>field type</code>选择<code>string</code>,<br>在 <code>db_name</code>输入<code>db_password</code> 在<code>field type</code>选择<code>string</code></p><h2 id="数据点击同步"><a href="#数据点击同步" class="headerlink" title="数据点击同步"></a>数据点击同步</h2><p>访问<code>http://localhost:8983/solr/#/new_core/dataimport//dataimport</code><br>执行 <code>Execute</code></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;solr环境运行&lt;/li&gt;
&lt;li&gt;导入mysql数据&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://zhiqw.github.io/categories/docker/"/>
    
    
      <category term="solr" scheme="https://zhiqw.github.io/tags/solr/"/>
    
  </entry>
  
  <entry>
    <title>gitlab&amp;gitlab-runner</title>
    <link href="https://zhiqw.github.io/2020/11/21/liunx/gitlab-gitlab-runner/"/>
    <id>https://zhiqw.github.io/2020/11/21/liunx/gitlab-gitlab-runner/</id>
    <published>2020-11-21T00:21:00.000Z</published>
    <updated>2021-06-18T14:22:11.535Z</updated>
    
    <content type="html"><![CDATA[<ul><li>gitlab安装</li><li>gitlab-runner安装</li></ul><a id="more"></a><p>yum 安装gitlab</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;gitlab-ce&#x2F;yum&#x2F;el7&#x2F;gitlab-ce-13.4.6-ce.0.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">rpm -ivh gitlab-ce-13.4.6-ce.0.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">修改配置文件</span><br><span class="line">vim &#x2F;etc&#x2F;gitlab.rb</span><br><span class="line">&#x2F;&#x2F;重新加载配置文件</span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;服务控制</span><br><span class="line">gitlab-ctl start</span><br><span class="line">gitlab-ctl status</span><br><span class="line">gitlab-ctl stop</span><br></pre></td></tr></table></figure><p>docker 安装gitlab</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;data&#x2F;gitlab-ce&#x2F;etc  &#x2F;data&#x2F;gitlab-ce&#x2F;logs  &#x2F;data&#x2F;gitlab-ce&#x2F;data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -d -p 8080:80 -p 443:443 -p 222:22 --name gitlab --restart always</span><br><span class="line">-v &#x2F;data&#x2F;gitlab-ce&#x2F;etc:&#x2F;etc&#x2F;gitlab</span><br><span class="line">-v &#x2F;data&#x2F;gitlab-ce&#x2F;logs:&#x2F;var&#x2F;logs&#x2F;gitlab</span><br><span class="line">-v &#x2F;data&#x2F;gitlab-ce&#x2F;data:&#x2F;var&#x2F;opt&#x2F;gitlab</span><br><span class="line">gitlab&#x2F;gitlab-ce</span><br><span class="line"></span><br><span class="line">docker exec -it gitlab bash</span><br><span class="line">vim &#x2F;etc&#x2F;gitlab.rb</span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line">docker start gitlab</span><br><span class="line">docker stop gitlanb</span><br><span class="line">docker rm gitlab</span><br></pre></td></tr></table></figure><p>yum 安装 gitlab-runner    </p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-runner/yum/el7/">https://mirrors.tuna.tsinghua.edu.cn/gitlab-runner/yum/el7/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;gitlab-runner&#x2F;yum&#x2F;el7&#x2F;gitlab-runner-13.4.1-1.x86_64.rpm</span><br><span class="line">rpm -ivh gitlab-runner-13.4.1-1.x86_64.rpm</span><br><span class="line">systemctl start gitlab-runner</span><br></pre></td></tr></table></figure><p>docker安装gitlab-runner</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab&#x2F;gitlab-runner:v13.4.1</span><br><span class="line"></span><br><span class="line">mkdir -p &#x2F;data&#x2F;gitlab-runner&#x2F;etc</span><br><span class="line"></span><br><span class="line">docker run -d --name gitlab-runner --restart always -v &#x2F;data&#x2F;gitlab-runner&#x2F;etc:&#x2F;etc&#x2F;gitlab-runner gitlab&#x2F;gitlab-runner:v13.4.1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;gitlab安装&lt;/li&gt;
&lt;li&gt;gitlab-runner安装&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="运维" scheme="https://zhiqw.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>nginx反向代理配置文件</title>
    <link href="https://zhiqw.github.io/2020/11/20/liunx/nginx-location-proxy/"/>
    <id>https://zhiqw.github.io/2020/11/20/liunx/nginx-location-proxy/</id>
    <published>2020-11-20T13:23:59.000Z</published>
    <updated>2021-06-18T14:22:11.535Z</updated>
    
    <content type="html"><![CDATA[<p>nginx反向代理配置</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name proxy.domain.com;</span><br><span class="line">  gzip on;</span><br><span class="line">  error_log logs&#x2F;proxy.log;</span><br><span class="line">  location &#x2F; &#123;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;localhost:4000;</span><br><span class="line">    proxy_redirect default;</span><br><span class="line">    proxy_set_header Host $host; </span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx反向代理配置&lt;/p&gt;
    
    </summary>
    
    
      <category term="运维" scheme="https://zhiqw.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>centos安装OpenResty api 网关 Orange</title>
    <link href="https://zhiqw.github.io/2020/08/20/liunx/openresty/"/>
    <id>https://zhiqw.github.io/2020/08/20/liunx/openresty/</id>
    <published>2020-08-20T04:00:00.000Z</published>
    <updated>2021-06-18T14:22:11.536Z</updated>
    
    <content type="html"><![CDATA[<ul><li>安装依赖</li><li>openresty安装</li><li>luarocks安装</li><li>mariadb安装</li><li>安装lor</li><li>启动并配置 orange 服务</li></ul><a id="more"></a><p>OpenResty api网关设计，主要涉及api网关介绍、openresty api网关 请求路由（路由判断、路由重写、服务判断、限流）、授权验证（统一认证）、动态Upstream 以及这三部分理论简单实现的Api网关和Api网关admin。</p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install libuuid-devel pcre-devel openssl-devel gcc-c++ wget perl-Time-HiRes perl-Digest-MD5</span><br></pre></td></tr></table></figure><h2 id="openresty安装"><a href="#openresty安装" class="headerlink" title="openresty安装"></a>openresty安装</h2><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><p><a href="https://openresty.org/cn/download.html">https://openresty.org/cn/download.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;openresty.org&#x2F;download&#x2F;openresty-1.13.6.1.tar.gz</span><br><span class="line">tar xf openresty-1.13.6.1.tar.gz </span><br><span class="line">cd openresty-1.13.6.1</span><br><span class="line">.&#x2F;configure  --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;openresty --with-http_stub_status_module --with-http_v2_module --with-http_ssl_module</span><br><span class="line">gmake &amp;&amp; gmake install</span><br></pre></td></tr></table></figure><h3 id="apt安装"><a href="#apt安装" class="headerlink" title="apt安装"></a>apt安装</h3><p><a href="https://openresty.org/cn/linux-packages.html">https://openresty.org/cn/linux-packages.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt install --no-install-recommends wget gnupg ca-certificates</span><br><span class="line">wget -O - https:&#x2F;&#x2F;openresty.org&#x2F;package&#x2F;pubkey.gpg | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository -y &quot;deb http:&#x2F;&#x2F;openresty.org&#x2F;package&#x2F;ubuntu $(lsb_release -sc) main&quot;</span><br><span class="line">apt update</span><br><span class="line">apt install -y openresty</span><br></pre></td></tr></table></figure><h2 id="luarocks安装"><a href="#luarocks安装" class="headerlink" title="luarocks安装"></a>luarocks安装</h2><p><a href="https://luarocks.org/">https://luarocks.org/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;luarocks.org&#x2F;releases&#x2F;luarocks-2.4.1.tar.gz</span><br><span class="line">cd luarocks-2.4.1&#x2F;</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;openresty&#x2F;luajit \</span><br><span class="line">    --with-lua&#x3D;&#x2F;usr&#x2F;local&#x2F;openresty&#x2F;luajit&#x2F; \</span><br><span class="line">    --lua-suffix&#x3D;jit \</span><br><span class="line">    --with-lua-include&#x3D;&#x2F;usr&#x2F;local&#x2F;openresty&#x2F;luajit&#x2F;include&#x2F;luajit-2.1</span><br><span class="line">make build</span><br><span class="line"># 安装需要root权限</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;profile.d&#x2F;openresty.sh </span><br><span class="line">export OPENRESTY_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;openresty</span><br><span class="line">export NGINX_HOME&#x3D;$OPENRESTY_HOME&#x2F;nginx</span><br><span class="line">export PATH&#x3D;$OPENRESTY_HOME&#x2F;bin:$NGINX_HOME&#x2F;sbin:$PATH</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><h2 id="mariadb安装"><a href="#mariadb安装" class="headerlink" title="mariadb安装"></a>mariadb安装</h2><p><a href="https://downloads.mariadb.org/mariadb/repositories/">https://downloads.mariadb.org/mariadb/repositories/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">rpm -e mysql-*</span><br><span class="line">rpm -qa | grep mariadb</span><br><span class="line">yum remove mysql mysql-server mysql-libs compat-mysql51</span><br><span class="line">vi &#x2F;etc&#x2F;yum.repos.d&#x2F;MariaDB.repo</span><br><span class="line"> </span><br><span class="line"># MariaDB 10.4 CentOS repository list - created 2019-09-28 03:16 UTC</span><br><span class="line"># http:&#x2F;&#x2F;downloads.mariadb.org&#x2F;mariadb&#x2F;repositories&#x2F;</span><br><span class="line">[mariadb]</span><br><span class="line">name &#x3D; MariaDB</span><br><span class="line">baseurl &#x3D; http:&#x2F;&#x2F;yum.mariadb.org&#x2F;10.4&#x2F;centos7-amd64</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;yum.mariadb.org&#x2F;RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">yum -y install MariaDB-server</span><br><span class="line"> </span><br><span class="line">mysql_secure_installation</span><br><span class="line">首先是设置密码，会提示先输入密码</span><br><span class="line"> </span><br><span class="line">Enter current password for root (enter for none):&lt;–初次运行直接回车</span><br><span class="line">Set root password? [Y&#x2F;n] &lt;– 是否设置root用户密码，输入y并回车或直接回车</span><br><span class="line">New password: &lt;– 设置root用户的密码</span><br><span class="line">Re-enter new password: &lt;– 再输入一次你设置的密码</span><br><span class="line">Remove anonymous users? [Y&#x2F;n] &lt;– 是否删除匿名用户，回车</span><br><span class="line">Disallow root login remotely? [Y&#x2F;n] &lt;–是否禁止root远程登录,回车（后面授权配置）</span><br><span class="line">Remove test database and access to it? [Y&#x2F;n] &lt;– 是否删除test数据库，回车 </span><br><span class="line">Reload privilege tables now? [Y&#x2F;n] &lt;– 是否重新加载权限表，回车</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">mysql -uroot -p</span><br><span class="line">CREATE USER &#39;orange&#39;@&#39;%&#39; IDENTIFIED BY &#39;orange&#39;;</span><br><span class="line"> </span><br><span class="line">GRANT ALL PRIVILEGES ON orange.* TO &#39;orange&#39;@&#39;%&#39;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h2 id="安装lor"><a href="#安装lor" class="headerlink" title="安装lor"></a>安装lor</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y git</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;sumory&#x2F;lor.git</span><br><span class="line">cd lor</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="启动并配置-orange-服务"><a href="#启动并配置-orange-服务" class="headerlink" title="启动并配置 orange 服务"></a>启动并配置 orange 服务</h2><p><a href="https://github.com/orlabs/orange/blob/master/README_zh.md">https://github.com/orlabs/orange/blob/master/README_zh.md</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop</span><br><span class="line">chkconfig iptables off</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;sumory&#x2F;orange.git</span><br><span class="line">cd orange</span><br><span class="line">&#x2F;&#x2F; orange 根目录  </span><br><span class="line">luarocks install luafilesystem</span><br><span class="line">luarocks install luasocket</span><br><span class="line">luarocks install lrandom</span><br><span class="line">&#x2F;&#x2F; 安装 orange 依赖包  </span><br><span class="line">opm --install-dir&#x3D;.&#x2F; get zhangbao0325&#x2F;orangelib  </span><br><span class="line">&#x2F;&#x2F;配置文件</span><br><span class="line">cd conf</span><br><span class="line">cp orange.conf.example orange.conf</span><br><span class="line">cp nginx.conf.example nginx.conf</span><br><span class="line">cd install&#x2F;</span><br><span class="line">mysql -u orange -porange -h 127.0.0.1  orange &lt; orange-v0.6.2.sql</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;安装依赖&lt;/li&gt;
&lt;li&gt;openresty安装&lt;/li&gt;
&lt;li&gt;luarocks安装&lt;/li&gt;
&lt;li&gt;mariadb安装&lt;/li&gt;
&lt;li&gt;安装lor&lt;/li&gt;
&lt;li&gt;启动并配置 orange 服务&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="运维" scheme="https://zhiqw.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql分表</title>
    <link href="https://zhiqw.github.io/2020/08/01/database/mysql-sub-table/"/>
    <id>https://zhiqw.github.io/2020/08/01/database/mysql-sub-table/</id>
    <published>2020-08-01T04:00:00.000Z</published>
    <updated>2021-06-18T14:22:11.533Z</updated>
    
    <content type="html"><![CDATA[<ul><li>分表常见方法</li><li>mysql实战分表</li></ul><a id="more"></a><blockquote><p>《阿里巴巴Java开发手册》提出单表行数超过500万行或者单表容量超过2GB，才推荐分库分表。</p></blockquote><h1 id="分表的方法"><a href="#分表的方法" class="headerlink" title="分表的方法"></a>分表的方法</h1><ul><li>中间件方式。如 mysql cluster ，mysql proxy，mysql replication，drdb等等</li><li>业务逻辑去分，如果订单按照日期，订单一个用户一张订单表，hash方式等等</li><li>merge存储引擎来实现分表</li></ul><h1 id="分表实战"><a href="#分表实战" class="headerlink" title="分表实战"></a>分表实战</h1><p>接下来是结合业务逻辑和merge去实现分表实战</p><p>code_1表创建插入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CREATE TABLE &#96;mm_1&#96; (</span><br><span class="line">&#96;full_code&#96; CHAR (10) NOT NULL,</span><br><span class="line">PRIMARY KEY (&#96;full_code&#96;)</span><br><span class="line">)ENGINE&#x3D;MyISAM  DEFAULT CHARACTER SET&#x3D;utf8;</span><br><span class="line">INSERT INTO mm_1 VALUES (1), (2), (3);</span><br></pre></td></tr></table></figure><p>code_2表创建插入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;mm_2&#96; (</span><br><span class="line">&#96;full_code&#96; CHAR (10) NOT NULL,</span><br><span class="line">PRIMARY KEY (&#96;full_code&#96;)</span><br><span class="line">)ENGINE&#x3D;MyISAM  DEFAULT CHARACTER SET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO mm_2 VALUES (4), (5), (6);</span><br></pre></td></tr></table></figure><p>使用merge创建合表数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists mm(</span><br><span class="line">&#96;full_code&#96; CHAR (10) NOT NULL,</span><br><span class="line">index(full_code)</span><br><span class="line">)engine &#x3D; merge union&#x3D;(mm_1,mm_2) insert_method &#x3D; last auto_increment&#x3D;1 default charset&#x3D;utf8;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;分表常见方法&lt;/li&gt;
&lt;li&gt;mysql实战分表&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://zhiqw.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Mysql设计与开发规范</title>
    <link href="https://zhiqw.github.io/2020/07/29/database/mysql-dev-specification/"/>
    <id>https://zhiqw.github.io/2020/07/29/database/mysql-dev-specification/</id>
    <published>2020-07-29T04:00:00.000Z</published>
    <updated>2021-06-18T14:22:11.533Z</updated>
    
    <content type="html"><![CDATA[<ul><li>数据库设计</li><li>sql编写</li></ul><a id="more"></a><blockquote><p>本规范旨在帮助或指导RD、QA、OP等技术人员做出适合线上业务的数据库设计。在数据库变更和处理流程、数据库表设计、SQL编写等方面予以规范，从而为公司业务系统稳定、健康地运行提供保障</p></blockquote><h2 id="设计规范"><a href="#设计规范" class="headerlink" title="设计规范"></a>设计规范</h2><blockquote><p>以下所有规范会按照【高危】、【强制】、【建议】三个级别进行标注，遵守优先级从高到低</p><p>对于不满足【高危】和【强制】两个级别的设计，DBA有权利强制打回要求修改</p></blockquote><h3 id="库名"><a href="#库名" class="headerlink" title="库名"></a>库名</h3><p>1.【强制】库的名称必须控制在32个字符以内，相关模块的表名与表名之间尽量体现join的关系，如user表和user_login表</p><p>2.【强制】库的名称格式：业务系统名称_子系统名，同一模块使用的库名尽量使用统一前缀</p><p>3.【强制】一般分库名称命名格式是库通配名_编号，编号从0开始递增，比如wenda_001以时间进行分库的名称格式是“库通配名_时间”</p><p>4.【强制】创建数据库时必须显式指定字符集，并且字符集只能是utf8或者utf8mb4。创建数据库SQL举例：<code>create database db1 default character set utf8;</code></p><h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><p>1.【强制】表必须有主键，且设置id为自增主键</p><p>2.【强制】表禁止使用外键，如果要保证完整下，应由程序端实现，外键使表之间相互耦合，影响update、delete等性能，有可能造成死锁，高并发环境下容易导致数据库性能瓶颈</p><p>3.【强制】表和列的名称必须控制在32个字符以内，表名只能使用字母、数字和下划线，一律小写。如表名过长可以采用缩写等方式</p><p>4.【强制】创建表时必须显式指定字符集为utf8或utf8mb4</p><p>5.【强制】创建表时必须显式指定表存储引擎类型，如无特殊需求，一律为InnoDB。当需要使用除InnoDB/MyISAM/Memory以外的存储引擎时，必须通过DBA审核才能在生产环境中使用。因为Innodb表支持事务、行锁、宕机恢复、MVCC等关系型数据库重要特性，为业界使用最多的MySQL存储引擎。而这是其他大多数存储引擎不具备的，因此首推InnoDB</p><p>6.【强制】建表必须有comment，表级别和字段级别都要有comment</p><p>7.【建议】建表时关于主键：(1)强制要求主键为id，类型为int或bigint（为了以后延展性，这里要求新建表统一为bigint），且为auto_increment(2)标识表里每一行主体的字段不要设为主键，建议设为其他字段如user_id，order_id等，并建立unique key索引。因为如果设为主键且主键值为随机插入，则会导致innodb内部page分裂和大量随机I/O，性能下降</p><p>8.【建议】核心表（如用户表，金钱相关的表）必须有行数据的创建时间字段create_time和最后更新时间字段update_time，便于查问题</p><p>9.【建议】表中所有字段必须都是NOT NULL default 默认值 属性，业务可以根据需要定义DEFAULT值。因为使用NULL值会存在每一行都会占用额外存储空间、数据迁移容易出错、聚合函数计算结果偏差以及索引失效等问题</p><p>10.【建议】建议对表里的blob、text等大字段，垂直拆分到其他表里，仅在需要读这些对象的时候才去select</p><p>11.【建议】反范式设计：把经常需要join查询的字段，在其他表里冗余一份。如user_name属性在user_account，user_login_log等表里冗余一份，减少join查询</p><p>12.【强制】中间表用于保留中间结果集，名称必须以tmp_开头。备份表用于备份或抓取源表快照，名称必须以bak_开头。中间表和备份表定期清理</p><p>13.【强制】对于线上执行DDL变更，必须经过DBA审核，并由DBA在业务低峰期执行</p><h3 id="列数据类型优化"><a href="#列数据类型优化" class="headerlink" title="列数据类型优化"></a>列数据类型优化</h3><p>1.【建议】表中的自增列（auto_increment属性），推荐使用bigint类型。因为无符号int存储范围为-2147483648~2147483647（大约21亿左右），溢出后会导致报错</p><p>2.【建议】业务中选择性很少的状态status、类型type等字段推荐使用tinytint或者smallint类型节省存储空</p><p>3.【建议】业务中IP地址字段推荐使用int类型，不推荐用char(15)。因为int只占4字节，可以用如下函数相互转换，而char(15)占用至少15字节。一旦表数据行数到了1亿，那么要多用1.1G存储空间。 SQL：select inet_aton(‘192.168.2.12’); select inet_ntoa(3232236044); PHP: ip2long(‘192.168.2.12’); long2ip(3530427185);</p><p>4.【建议】不推荐使用enum，set。 因为它们浪费空间，且枚举值写死了，变更不方便。推荐使用tinyint或smallint</p><p>5.【建议】不推荐使用blob，text等类型。它们都比较浪费硬盘和内存空间。在加载表数据时，会读取大字段到内存里从而浪费内存空间，影响系统性能。建议和PM、RD沟通，是否真的需要这么大字段</p><p>6.【建议】存储金钱的字段，建议用int，程序端乘以100和除以100进行存取。或者用decimal类型，而不要用double</p><p>7.【建议】文本数据尽量用varchar存储。因为varchar是变长存储，比char更省空间。MySQL server层规定一行所有文本最多存65535字节</p><p>8.【建议】时间类型尽量选取datetime。而timestamp虽然占用空间少，但是有时间范围为1970-01-01 00:00:01到2038-01-01 00:00:00的问题</p><h3 id="索引设计"><a href="#索引设计" class="headerlink" title="索引设计"></a>索引设计</h3><p>1.【强制】InnoDB表必须主键为id int/bigint auto_increment,且主键值禁止被更新</p><p>2.【建议】唯一键以“uk_”或“uq_”开头，普通索引以“idx_”开头，一律使用小写格式，以字段的名称或缩写作为后缀</p><p>3.【强制】InnoDB和MyISAM存储引擎表，索引类型必须为BTREE；MEMORY表可以根据需要选择HASH或者BTREE类型索引</p><p>4.【强制】单个索引中每个索引记录的长度不能超过64KB</p><p>5.【建议】单个表上的索引个数不能超过5个</p><p>6.【建议】在建立索引时，多考虑建立联合索引，并把区分度最高的字段放在最前面。如列userid的区分度可由select count(distinct userid)计算出来</p><p>7.【建议】在多表join的SQL里，保证被驱动表的连接列上有索引，这样join执行效率最高</p><p>8.【建议】建表或加索引时，保证表里互相不存在冗余索引。对于MySQL来说，如果表里已经存在key(a,b)，则key(a)为冗余索引，需要删除</p><h3 id="分库分表、分区表"><a href="#分库分表、分区表" class="headerlink" title="分库分表、分区表"></a>分库分表、分区表</h3><p>1.【强制】分区表的分区字段（partition-key）必须有索引，或者是组合索引的首列</p><p>2.【强制】单个分区表中的分区（包括子分区）个数不能超过1024</p><p>3.【强制】上线前RD或者DBA必须指定分区表的创建、清理策略</p><p>4.【强制】访问分区表的SQL必须包含分区键</p><p>5.【建议】单个分区文件不超过2G，总大小不超过50G。建议总分区数不超过20个</p><p>6.【强制】对于分区表执行alter table操作，必须在业务低峰期执行</p><p>7.【强制】采用分库策略的，库的数量不能超过1024</p><p>8.【强制】采用分表策略的，表的数量不能超过4096</p><p>9.【建议】单个分表建议不超过500W行，这样才能保证数据查询性能更佳</p><p>10.【建议】水平分表尽量用取模方式，并预留出足够的buffer，以免日后需要重新拆分和迁移，日志、报表类数据建议采用日期进行分表</p><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><p>1.【强制】数据库本身库、表、列所有字符集必须保持一致，为utf8或utf8mb4</p><p>2.【强制】前端程序字符集或者环境变量中的字符集，与数据库、表的字符集必须一致，统一为utf8</p><h2 id="SQL编写"><a href="#SQL编写" class="headerlink" title="SQL编写"></a>SQL编写</h2><h3 id="DML语句"><a href="#DML语句" class="headerlink" title="DML语句"></a>DML语句</h3><p>1.【强制】SELECT语句必须指定具体字段名称，禁止写成*。因为select *会将不该读的数据也从MySQL里读出来，造成网卡压力。且表字段一旦更新，但程序端没有来得及更新的话，系统会报错</p><p>2.【强制】insert语句指定具体字段名称，不要写成insert into t1 values(…)，道理同上</p><p>3.【建议】insert into…values(XX),(XX),(XX)…。这里XX的值不要超过500个。值过多虽然上线很很快，但会引起主从同步延迟</p><p>4.【建议】SELECT语句不要使用UNION，推荐使用UNION ALL，并且UNION子句个数限制在3个以内。因为union all不需要去重，节省数据库资源，提高性能</p><p>5.【建议】in值列表限制在500以内。例如select… where userid in(….500个以内…)，这么做是为了减少底层扫描，减轻数据库压力从而加速查询</p><p>6.【建议】事务里批量更新数据需要控制数量，进行必要的sleep，做到少量多次</p><p>7.【强制】事务涉及的表必须全部是innodb表。否则一旦失败不会全部回滚，且易造成主从库同步中断</p><p>8.【强制】写入和事务发往主库，只读SQL发往从库，即程序端实现读写分离</p><p>9.【强制】DML语句必须有where条件，且使用索引查找</p><p>10.【强制】生产环境禁止使用hint，如sql_no_cache，force index，ignore key，straight join等。因为hint是用来强制SQL按照某个执行计划来执行，但随着数据量变化我们无法保证自己当初的预判是正确的，我们要尽量让MySQL优化器自己选择执行计划</p><p>11.【强制】where条件里等号左右字段类型必须一致，否则无法利用索引</p><p>12.【建议】SELECT|UPDATE|DELETE|REPLACE要有WHERE子句，且WHERE子句的条件必需使用索引查找</p><p>13.【强制】生产数据库中强烈不推荐大表上发生全表扫描，但对于100行以下的静态表可以全表扫描。查询数据量不要超过表行数的25%，否则不会利用索引</p><p>14.【强制】WHERE 子句中禁止只使用全模糊的LIKE条件进行查找，如果要使用like，请使用like ‘xxxx%’的方式，必须有其他等值或范围查询条件，否则无法利用索引</p><p>15.【建议】索引列不要使用函数或表达式，否则无法利用索引。如where length(name)=’Admin’或where user_id+2=10023</p><p>16.【建议】减少使用or语句，可将or语句优化为union，然后在各个where条件上建立索引。如where a=1 or b=2优化为where a=1… union …where b=2, key(a),key(b)</p><p>17.【建议】分页查询，当limit起点较高时，可先用过滤条件进行过滤。如select a,b,c from t1 limit 10000,20;优化为: select a,b,c from t1 where id&gt;10000 limit 20;</p><h3 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h3><p>1.【强制】禁止跨db的join语句。因为这样可以减少模块间耦合，为数据库拆分奠定坚实基础</p><p>2.【强制】禁止在业务的更新类SQL语句中使用join，比如update t1 join t2…</p><p>3.【建议】不建议使用子查询，建议将子查询SQL拆开结合程序多次查询，或使用join来代替子查询</p><p>4.【建议】线上环境，多表join不要超过3个表</p><p>5.【建议】多表连接查询推荐使用别名，且SELECT列表中要用别名引用字段，数据库.表格式，如select a from db1.table1 alias1 where …</p><p>6.【建议】在多表join中，尽量选取结果集较小的表作为驱动表，来join其他表</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>1.【建议】事务中INSERT|UPDATE|DELETE|REPLACE语句操作的行数控制在1000以内，以及WHERE子句中IN列表的传参个数控制在500以内</p><p>2.【建议】批量操作数据时，需要控制事务处理间隔时间，进行必要的sleep，一般建议值1-2秒</p><p>3.【建议】对于有auto_increment属性字段的表的插入操作，并发需要控制在200以内</p><p>4.【强制】程序设计必须考虑“数据库事务隔离级别”带来的影响，包括脏读、不可重复读和幻读。线上建议事务隔离级别为repeatable-read</p><p>5.【建议】事务里包含SQL不超过5个（支付业务除外）。因为过长的事务会导致锁数据较久，MySQL内部缓存、连接消耗过多等雪崩问题</p><p>6.【建议】事务里更新语句尽量基于主键或unique key，如update … where id=XX; 否则会产生间隙锁，内部扩大锁定范围，导致系统性能下降，产生死锁</p><p>7.【建议】尽量把一些典型外部调用移出事务，如调用webservice，访问文件存储等，从而避免事务过长</p><p>8.【建议】对于MySQL主从延迟严格敏感的select语句，请开启事务强制访问主库</p><h3 id="排序和分组"><a href="#排序和分组" class="headerlink" title="排序和分组"></a>排序和分组</h3><p>1.【建议】减少使用order by，和业务沟通能不排序就不排序，或将排序放到程序端去做。order by、group by、distinct这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的</p><p>2.【建议】order by、group by、distinct这些SQL尽量利用索引直接检索出排序好的数据。如where a=1 order by可以利用key(a,b)</p><p>3.【建议】包含了order by、group by、distinct这些查询的语句，where条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢</p><h3 id="线上禁止使用的SQL语句"><a href="#线上禁止使用的SQL语句" class="headerlink" title="线上禁止使用的SQL语句"></a>线上禁止使用的SQL语句</h3><p>1.【高危】禁用update|delete t1 … where a=XX limit XX; 这种带limit的更新语句。如果是非row格式的binlog格式，会导致主从不一致，导致数据错乱。建议加上order by PK</p><p>2.【高危】禁止使用关联子查询，如update t1 set … where name in(select name from user where…);效率极其低下</p><p>3.【强制】禁用procedure、function、trigger、views、event、外键约束。因为他们消耗数据库资源，降低数据库实例可扩展性。推荐都在程序端实现</p><p>4.【建议】禁用insert into …on duplicate key update…、replace into等语句，在高并发环境下，极容易导致死锁</p><p>5.【强制】禁止联表更新语句，如update t1,t2 where t1.id=t2.id…</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;数据库设计&lt;/li&gt;
&lt;li&gt;sql编写&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://zhiqw.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://zhiqw.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>宝塔linux面板命令大全</title>
    <link href="https://zhiqw.github.io/2020/07/07/liunx/liunx-centos-bt/"/>
    <id>https://zhiqw.github.io/2020/07/07/liunx/liunx-centos-bt/</id>
    <published>2020-07-07T05:39:00.000Z</published>
    <updated>2021-06-18T14:22:11.535Z</updated>
    
    <content type="html"><![CDATA[<ul><li>安装命令</li><li>管理宝塔命令</li><li>nginx服务</li><li>apache服务</li><li>mysql服务</li><li>ftp服务</li><li>php服务</li><li>redis服务</li><li>memcahed服务</li></ul><a id="more"></a><h2 id="安装宝塔"><a href="#安装宝塔" class="headerlink" title="安装宝塔"></a>安装宝塔</h2><p>Centos安装脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><p>Ubuntu/Deepin安装脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh</span><br></pre></td></tr></table></figure><p>Debian安装脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install-ubuntu_6.0.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure><p>Fedora安装脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install_6.0.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure><h2 id="管理宝塔"><a href="#管理宝塔" class="headerlink" title="管理宝塔"></a>管理宝塔</h2><p>宝塔工具箱(包含下列绝大部分功能 直接ssh中执行bt命令 仅限6.x以上版本面板)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bt</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;bt stop</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;bt start</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;bt restart</span><br></pre></td></tr></table></figure><p>卸载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;bt stop &amp;&amp; chkconfig --del bt &amp;&amp; rm -f &#x2F;etc&#x2F;init.d&#x2F;bt &amp;&amp; rm -rf &#x2F;www&#x2F;server&#x2F;panel</span><br></pre></td></tr></table></figure><p>查看当前面板端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;www&#x2F;server&#x2F;panel&#x2F;data&#x2F;port.pl</span><br></pre></td></tr></table></figure><p>修改面板端口，如要改成8881（centos 6 系统）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;8881&#39; &gt; &#x2F;www&#x2F;server&#x2F;panel&#x2F;data&#x2F;port.pl &amp;&amp; &#x2F;etc&#x2F;init.d&#x2F;bt restart</span><br><span class="line">iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 8881 -j ACCEPT</span><br><span class="line">service iptables save</span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><p>修改面板端口，如要改成8881（centos 7 系统）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;8881&#39; &gt; &#x2F;www&#x2F;server&#x2F;panel&#x2F;data&#x2F;port.pl &amp;&amp; &#x2F;etc&#x2F;init.d&#x2F;bt restart</span><br><span class="line">firewall-cmd --permanent --zone&#x3D;public --add-port&#x3D;8881&#x2F;tcp</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>强制修改MySQL管理(root)密码，如要改成123456</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;www&#x2F;server&#x2F;panel &amp;&amp; python tools.py root 123456</span><br></pre></td></tr></table></figure><p>修改面板密码，如要改成123456</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;www&#x2F;server&#x2F;panel &amp;&amp; python tools.py panel 123456</span><br></pre></td></tr></table></figure><p>查看宝塔日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;tmp&#x2F;panelBoot.pl</span><br></pre></td></tr></table></figure><p>查看软件安装日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;tmp&#x2F;panelExec.log</span><br></pre></td></tr></table></figure><p>站点配置文件位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www&#x2F;server&#x2F;panel&#x2F;vhost</span><br></pre></td></tr></table></figure><p>删除域名绑定面板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f &#x2F;www&#x2F;server&#x2F;panel&#x2F;data&#x2F;domain.conf</span><br></pre></td></tr></table></figure><p>清理登陆限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f &#x2F;www&#x2F;server&#x2F;panel&#x2F;data&#x2F;*.login</span><br></pre></td></tr></table></figure><p>查看面板授权IP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;www&#x2F;server&#x2F;panel&#x2F;data&#x2F;limitip.conf</span><br></pre></td></tr></table></figure><p>关闭访问限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f &#x2F;www&#x2F;server&#x2F;panel&#x2F;data&#x2F;limitip.conf</span><br></pre></td></tr></table></figure><p>查看许可域名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;www&#x2F;server&#x2F;panel&#x2F;data&#x2F;domain.conf</span><br></pre></td></tr></table></figure><p>关闭面板SSL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f &#x2F;www&#x2F;server&#x2F;panel&#x2F;data&#x2F;ssl.pl &amp;&amp; &#x2F;etc&#x2F;init.d&#x2F;bt restart</span><br></pre></td></tr></table></figure><p>查看面板错误日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;tmp&#x2F;panelBoot</span><br></pre></td></tr></table></figure><p>查看数据库错误日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;www&#x2F;server&#x2F;data&#x2F;*.err</span><br></pre></td></tr></table></figure><p>站点配置文件目录(nginx)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www&#x2F;server&#x2F;panel&#x2F;vhost&#x2F;nginx</span><br></pre></td></tr></table></figure><p>站点配置文件目录(apache)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www&#x2F;server&#x2F;panel&#x2F;vhost&#x2F;apache</span><br></pre></td></tr></table></figure><p>站点默认目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www&#x2F;wwwroot</span><br></pre></td></tr></table></figure><p>数据库备份目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www&#x2F;backup&#x2F;database</span><br></pre></td></tr></table></figure><p>站点备份目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www&#x2F;backup&#x2F;site</span><br></pre></td></tr></table></figure><p>站点日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www&#x2F;wwwlogs</span><br></pre></td></tr></table></figure><h2 id="Nginx服务管理"><a href="#Nginx服务管理" class="headerlink" title="Nginx服务管理"></a>Nginx服务管理</h2><p>nginx安装目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www&#x2F;server&#x2F;nginx</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;nginx start</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;nginx stop</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;nginx restart</span><br></pre></td></tr></table></figure><p>启载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;nginx reload</span><br></pre></td></tr></table></figure><p>nginx配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www&#x2F;server&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br></pre></td></tr></table></figure><h2 id="Apache服务管理"><a href="#Apache服务管理" class="headerlink" title="Apache服务管理"></a>Apache服务管理</h2><p>apache安装目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www&#x2F;server&#x2F;httpd</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;httpd start</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;httpd stop</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;httpd restart</span><br></pre></td></tr></table></figure><p>启载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;httpd reload</span><br></pre></td></tr></table></figure><p>apache配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www&#x2F;server&#x2F;apache&#x2F;conf&#x2F;httpd.conf</span><br></pre></td></tr></table></figure><h2 id="MySQL服务管理"><a href="#MySQL服务管理" class="headerlink" title="MySQL服务管理"></a>MySQL服务管理</h2><p>mysql安装目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www&#x2F;server&#x2F;mysql</span><br></pre></td></tr></table></figure><p>phpmyadmin安装目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www&#x2F;server&#x2F;phpmyadmin</span><br></pre></td></tr></table></figure><p>数据存储目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www&#x2F;server&#x2F;data</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;mysqld start</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;mysqld stop</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;mysqld restart</span><br></pre></td></tr></table></figure><p>启载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;mysqld reload</span><br></pre></td></tr></table></figure><p>mysql配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;my.cnf</span><br></pre></td></tr></table></figure><h2 id="FTP服务管理"><a href="#FTP服务管理" class="headerlink" title="FTP服务管理"></a>FTP服务管理</h2><p>ftp安装目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www&#x2F;server&#x2F;pure-ftpd</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;pure-ftpd start</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;pure-ftpd stop</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;pure-ftpd restart</span><br></pre></td></tr></table></figure><p>ftp配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www&#x2F;server&#x2F;pure-ftpd&#x2F;etc&#x2F;pure-ftpd.conf</span><br></pre></td></tr></table></figure><h2 id="PHP服务管理"><a href="#PHP服务管理" class="headerlink" title="PHP服务管理"></a>PHP服务管理</h2><p>php安装目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www&#x2F;server&#x2F;php</span><br></pre></td></tr></table></figure><p>启动(请根据安装PHP版本号做更改，例如：/etc/init.d/php-fpm-54 start)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;php-fpm-&#123;52|53|54|55|56|70|71|72|73|74&#125; start</span><br></pre></td></tr></table></figure><p>停止(请根据安装PHP版本号做更改，例如：/etc/init.d/php-fpm-54 stop)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;php-fpm-&#123;52|53|54|55|56|70|71|72|73|74&#125; stop</span><br></pre></td></tr></table></figure><p>重启(请根据安装PHP版本号做更改，例如：/etc/init.d/php-fpm-54 restart)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;php-fpm-&#123;52|53|54|55|56|70|71|72|73|74&#125; restart</span><br></pre></td></tr></table></figure><p>启载(请根据安装PHP版本号做更改，例如：/etc/init.d/php-fpm-54 reload)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;php-fpm-&#123;52|53|54|55|56|70|71|72|73|74&#125; reload</span><br></pre></td></tr></table></figure><p>配置文件(请根据安装PHP版本号做更改，例如：/www/server/php/52/etc/php.ini)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www&#x2F;server&#x2F;php&#x2F;&#123;52|53|54|55|56|70|71|72|73|74&#125;&#x2F;etc&#x2F;php.ini</span><br></pre></td></tr></table></figure><h2 id="Redis服务管理"><a href="#Redis服务管理" class="headerlink" title="Redis服务管理"></a>Redis服务管理</h2><p>redis安装目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www&#x2F;server&#x2F;redis</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;redis start</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;redis stop</span><br></pre></td></tr></table></figure><p>redis配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www&#x2F;server&#x2F;redis&#x2F;redis.conf</span><br></pre></td></tr></table></figure><h2 id="Memcached服务管理"><a href="#Memcached服务管理" class="headerlink" title="Memcached服务管理"></a>Memcached服务管理</h2><p>memcached安装目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;memcached</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;memcached start</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;memcached stop</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;memcached restart</span><br></pre></td></tr></table></figure><p>启载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;memcached reload</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;安装命令&lt;/li&gt;
&lt;li&gt;管理宝塔命令&lt;/li&gt;
&lt;li&gt;nginx服务&lt;/li&gt;
&lt;li&gt;apache服务&lt;/li&gt;
&lt;li&gt;mysql服务&lt;/li&gt;
&lt;li&gt;ftp服务&lt;/li&gt;
&lt;li&gt;php服务&lt;/li&gt;
&lt;li&gt;redis服务&lt;/li&gt;
&lt;li&gt;memcahed服务&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="运维" scheme="https://zhiqw.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql用户篇</title>
    <link href="https://zhiqw.github.io/2020/07/04/database/mysql-user/"/>
    <id>https://zhiqw.github.io/2020/07/04/database/mysql-user/</id>
    <published>2020-07-04T04:04:00.000Z</published>
    <updated>2021-06-18T14:22:11.533Z</updated>
    
    <content type="html"><![CDATA[<ul><li>用户管理</li><li>权限管理</li><li>数据备份还原</li></ul><a id="more"></a><h1 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h1><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 创建用户，并允许其在任何IP登陆</span><br><span class="line">create user &#39;username&#39;@&#39;%&#39; identified by &#39;password&#39;;</span><br><span class="line"></span><br><span class="line">-- 创建用户，并允许其在任何主机登陆，不设置密码</span><br><span class="line">create user &#39;username&#39;@&#39;%&#39;;</span><br><span class="line"></span><br><span class="line">-- 创建用户，并仅允许使用domian.com域名的主机登陆</span><br><span class="line">create user &#39;username&#39;@&#39;domian.com&#39; identified by &#39;password&#39;;</span><br><span class="line"></span><br><span class="line">-- 创建用户，并仅允许使用192.168.1.1的主机登陆</span><br><span class="line">create user &#39;username&#39;@&#39;192.168.1.1&#39; identified by &#39;password&#39;;</span><br><span class="line"></span><br><span class="line">-- 创建用户，并仅允许使用192.168.1开头的主机登陆</span><br><span class="line">create user &#39;username&#39;@&#39;192.168.1.%&#39; identified by &#39;password&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>密码可以为空，如为空，则可以免密登陆</p><p>如果主机位使用 <code>%</code>，表示允许任意地址的主机登陆</p><p>主机位可以使用域名或者 IP 地址，但是不允许既有数字又有字母</p><p>主机位中可以使用 <code>%</code> 进行通配，例如：<code>%.domian.com</code> 或 <code>192.168.1.%</code></p></blockquote><h2 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rename user &#39;old_username&#39;@&#39;old_ip_addr&#39; to &#39;new_username&#39;@&#39;new_ip_addr&#39;;</span><br><span class="line"></span><br><span class="line">set password for &#39;username&#39;@&#39;ip_addr&#39;&#x3D;Password(&#39;new_password&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;修改完密码，需将配置刷到内存</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user &#39;username&#39;@&#39;ip_addr&#39;;</span><br></pre></td></tr></table></figure><h1 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h1><h2 id="查看权限"><a href="#查看权限" class="headerlink" title="查看权限"></a>查看权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show grants for &#39;username&#39;@&#39;ip_addr&#39;;</span><br></pre></td></tr></table></figure><h2 id="权限授予"><a href="#权限授予" class="headerlink" title="权限授予"></a>权限授予</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 授予用户所有库所有表的所有权限</span><br><span class="line">grant all privileges on *.* to &#39;username&#39;@&#39;ip_addr&#39;;</span><br><span class="line"></span><br><span class="line">-- 授予用户database1库所有表的所有权限</span><br><span class="line">grant all privileges on &#96;database1&#96;.* to &#39;username&#39;@&#39;ip_addr&#39;;</span><br><span class="line"></span><br><span class="line">-- 授予用户database1库table1表的所有权限</span><br><span class="line">grant all privileges on &#96;database1&#96;.&#96;table1&#96; to &#39;username&#39;@&#39;ip_addr&#39;;</span><br><span class="line"></span><br><span class="line">-- 授予用户database1库所有表的只读权限</span><br><span class="line">grant select on &#96;database1&#96;.* to &#39;username&#39;@&#39;ip_addr&#39;;</span><br><span class="line"></span><br><span class="line">-- 授予用户database1库table1表的插入、更新权限</span><br><span class="line">grant insert,update on &#96;database1&#96;.&#96;table1&#96; to &#39;username&#39;@&#39;ip_addr&#39;;</span><br></pre></td></tr></table></figure><h2 id="权限回收"><a href="#权限回收" class="headerlink" title="权限回收"></a>权限回收</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 回收用户所有权限</span><br><span class="line">revoke all,grant option from &#39;username&#39;@&#39;ip_addr&#39;;</span><br><span class="line"></span><br><span class="line">-- 回收用户database1库所有表的只读权限</span><br><span class="line">revoke select ON &#96;database1&#96;.* FROM &#39;username&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure><h1 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 备份database1库所有表结构+数据</span><br><span class="line">mysqdump -u username database1 &gt; database1.sql -p</span><br><span class="line"></span><br><span class="line">-- 备份database1库所有表结构</span><br><span class="line">mysqdump -u username -d database1 &gt; database1.sql -p</span><br><span class="line"></span><br><span class="line">-- 进入数据库</span><br><span class="line">use database1;</span><br><span class="line">-- 将备份文件恢复到数据库中</span><br><span class="line">mysqdump -u username -d database1 &lt; database1.sql -p</span><br></pre></td></tr></table></figure><h1 id="常用权限列表"><a href="#常用权限列表" class="headerlink" title="常用权限列表"></a>常用权限列表</h1><table><thead><tr><th>权 限</th><th>作用范围</th><th>作 用</th></tr></thead><tbody><tr><td>all</td><td>服务器</td><td>所有权限</td></tr><tr><td>select</td><td>表、列</td><td>选择行</td></tr><tr><td>insert</td><td>表、列</td><td>插入行</td></tr><tr><td>update</td><td>表、列</td><td>更新行</td></tr><tr><td>delete</td><td>表</td><td>删除行</td></tr><tr><td>create</td><td>数据库、表、索引</td><td>创建</td></tr><tr><td>drop</td><td>数据库、表、视图</td><td>删除</td></tr><tr><td>reload</td><td>服务器</td><td>允许使用flush语句</td></tr><tr><td>shutdown</td><td>服务器</td><td>关闭服务</td></tr><tr><td>process</td><td>服务器</td><td>查看线程信息</td></tr><tr><td>file</td><td>服务器</td><td>文件操作</td></tr><tr><td>grant option</td><td>数据库、表、存储过程</td><td>授权</td></tr><tr><td>references</td><td>数据库、表</td><td>外键约束的父表</td></tr><tr><td>index</td><td>表</td><td>创建/删除索引</td></tr><tr><td>alter</td><td>表</td><td>修改表结构</td></tr><tr><td>show databases</td><td>服务器</td><td>查看数据库名称</td></tr><tr><td>super</td><td>服务器</td><td>超级权限</td></tr><tr><td>create temporary tables</td><td>表</td><td>创建临时表</td></tr><tr><td>lock tables</td><td>数据库</td><td>锁表</td></tr><tr><td>execute</td><td>存储过程</td><td>执行</td></tr><tr><td>replication client</td><td>服务器</td><td>允许查看主/从/二进制日志状态</td></tr><tr><td>replication slave</td><td>服务器</td><td>主从复制</td></tr><tr><td>create view</td><td>视图</td><td>创建视图</td></tr><tr><td>show view</td><td>视图</td><td>查看视图</td></tr><tr><td>create routine</td><td>存储过程</td><td>创建存储过程</td></tr><tr><td>alter routine</td><td>存储过程</td><td>修改/删除存储过程</td></tr><tr><td>create user</td><td>服务器</td><td>创建用户</td></tr><tr><td>event</td><td>数据库</td><td>创建/更改/删除/查看事件</td></tr><tr><td>trigger</td><td>表</td><td>触发器</td></tr><tr><td>create tablespace</td><td>服务器</td><td>创建/更改/删除表空间/日志文件</td></tr><tr><td>proxy</td><td>服务器</td><td>代理成为其它用户</td></tr><tr><td>usage</td><td>服务器</td><td>没有权限</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;用户管理&lt;/li&gt;
&lt;li&gt;权限管理&lt;/li&gt;
&lt;li&gt;数据备份还原&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://zhiqw.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://zhiqw.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>thinkphp+mysql无线分类从需求到代码演示</title>
    <link href="https://zhiqw.github.io/2020/06/28/php/thinkphp-mysql-tree/"/>
    <id>https://zhiqw.github.io/2020/06/28/php/thinkphp-mysql-tree/</id>
    <published>2020-06-28T04:00:00.000Z</published>
    <updated>2021-06-18T14:22:11.537Z</updated>
    
    <content type="html"><![CDATA[<ul><li>栏目无线分类</li><li>无线分销（技术是无罪的，商业请使用三级分销）</li><li>省市县联动</li></ul><a id="more"></a><p>在我们做任何系统中离不开无线分类这个分类，同样也是老掉牙的问题。为什么又拿来说呢？归功到底还是博客的内容太少。</p><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ul><li>栏目无线分类</li><li>无线分销（技术是无罪的，商业请使用三级分销）</li><li>省市县联动</li></ul><h1 id="需求决定代码"><a href="#需求决定代码" class="headerlink" title="需求决定代码"></a>需求决定代码</h1><p>无论你做任何系统都是有需求，你才去研究；没有需求，就是伪需求，自己玩玩就好。无论什么样的 需求都离不开sql和逻辑判断，下面的需求主要是围绕thinkphp+mysql来实现案例</p><h2 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h2><table><thead><tr><th>字段</th><th>类型</th><th>NULL</th><th>默认</th><th>注释</th></tr></thead><tbody><tr><td>id</td><td>int(10)</td><td>否</td><td></td><td>自增ID</td></tr><tr><td>parent_id</td><td>int(10)</td><td>否</td><td>0</td><td>上级ID</td></tr><tr><td>name</td><td>varchar(50)</td><td>否</td><td></td><td>名称</td></tr><tr><td>order</td><td>int(10)</td><td>否</td><td>0</td><td>排序</td></tr></tbody></table><h2 id="根据子类ID获取所有父类"><a href="#根据子类ID获取所有父类" class="headerlink" title="根据子类ID获取所有父类"></a>根据子类<code>ID</code>获取所有父类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function get_user_father_array($uid,$array&#x3D;[])&#123;</span><br><span class="line">    $user &#x3D;  \think\Db::name(&#39;users&#39;)-&gt;where(&#39;id&#39;,$uid)-&gt;find();</span><br><span class="line">    $array[] &#x3D; $user;</span><br><span class="line">    if($user[&#39;parent_id&#39;])&#123;</span><br><span class="line">        return get_user_father_array($user[&#39;parent_id&#39;],$array);</span><br><span class="line">    &#125;</span><br><span class="line">    return $array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="根据父类查所有子类"><a href="#根据父类查所有子类" class="headerlink" title="根据父类查所有子类"></a>根据父类查所有子类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; sql 获取子类数据</span><br><span class="line">function get_child_user_sql($uid)&#123;</span><br><span class="line">    $sql &#x3D; &quot;SELECT * FROM  &quot;.</span><br><span class="line">    &quot;(SELECT id,parent_id FROM users ORDER BY parent_id,id) as t,(SELECT @pv :&#x3D; &#123;$uid&#125;) as pv &quot;.</span><br><span class="line">    &quot;WHERE find_in_set(parent_id, @pv) AND LENGTH(@pv :&#x3D; concat(@pv, &#39;,&#39;, id))&quot;;</span><br><span class="line">    return \think\Db::query($sql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="点对点是否在一个枝干上"><a href="#点对点是否在一个枝干上" class="headerlink" title="点对点是否在一个枝干上"></a>点对点是否在一个枝干上</h2><blockquote><p>XYZ的上级为0，也就是说是顶级树干</p><p>X 推荐了 B 和 C</p><p>B 推荐XB1、XB2、XB3、…..XBn</p><p>C 推荐XC1、XC2、XC3、……XCn</p><p>问： XB1和XC1 和是否在一枝干上</p><p>答：某个项目告诉我不是，为什么？</p><p>XB1的分枝干包含 X、B</p><p>XC1的分枝干包含 X、C</p><p>不难看出来 他们的上级是不同的，所有不是，所以我们要实现这个需求，就是通过路径来判断</p></blockquote><p>实现步骤</p><ol><li>先找到XB1的所有父类连接成字符串</li><li>然后找到XC1的所有父类连接成字符串</li><li>比较2个字符串是否包含或被包含</li></ol><p>代码实现一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$left &#x3D; array_column(get_user_father_array($left_uid),&#39;id&#39;);</span><br><span class="line">$leftstr &#x3D; implode(&quot;,&quot;,$left);</span><br><span class="line"></span><br><span class="line">$right &#x3D;  array_column(get_user_father_array(right_uid),&#39;id&#39;);</span><br><span class="line">$rightstr &#x3D; implode(&quot;,&quot;,$right);</span><br><span class="line"></span><br><span class="line">function str2strpos($str1 ,$str2)&#123;</span><br><span class="line">    $str1len &#x3D; strlen($str1);</span><br><span class="line">    $str2len &#x3D; strlen($str2);</span><br><span class="line">    if($str1len  &gt;  $str2len &amp;&amp; strpos($str1,$str2) !&#x3D;&#x3D; false)&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    if($str1len  &lt;  $str2len &amp;&amp; strpos($str2,$str1) !&#x3D;&#x3D; false)&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(str2strpos($leftstr,$rightstr))&#123;</span><br><span class="line">echo &quot;在同一枝干上&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;栏目无线分类&lt;/li&gt;
&lt;li&gt;无线分销（技术是无罪的，商业请使用三级分销）&lt;/li&gt;
&lt;li&gt;省市县联动&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="php" scheme="https://zhiqw.github.io/categories/php/"/>
    
    
      <category term="mysql" scheme="https://zhiqw.github.io/tags/mysql/"/>
    
      <category term="thinkphp" scheme="https://zhiqw.github.io/tags/thinkphp/"/>
    
  </entry>
  
  <entry>
    <title>软件开发流程</title>
    <link href="https://zhiqw.github.io/2020/06/28/management/development-process/"/>
    <id>https://zhiqw.github.io/2020/06/28/management/development-process/</id>
    <published>2020-06-27T17:00:00.000Z</published>
    <updated>2021-06-18T14:22:11.536Z</updated>
    
    <content type="html"><![CDATA[<p>一、产品爸爸提需求<br>二、需求评审<br>三、技术方案设计<br>四、技术设计评审<br>五、排期<br>六、开发<br>七、code review<br>八、测试<br>九、上线<br>十、上线后回测</p><a id="more"></a><blockquote><ul><li>PM：产品经理</li><li>PM：项目经理</li><li>UE：交互设计师，负责页面布局、交互的设计，不负责视图的细节。</li><li>UI：视觉设计师，交互确定之后，设计页面样式。注意，很多情况下，UE 和 UI 是一个人。</li><li>RD：后端开发人员。</li><li>CRD：客户端开发人员，安卓和 ios 都是。</li><li>FE：前端开发人员。</li><li>QA：测试人员。</li><li>OP：服务器运维人员，一般负责审批上线单。</li></ul></blockquote><h2 id="一、产品爸爸提需求"><a href="#一、产品爸爸提需求" class="headerlink" title="一、产品爸爸提需求"></a>一、产品爸爸提需求</h2><p>产品爸爸们通过对用户的分析和反馈，还有多年行业经验，以及同行之间产品分析，YY出了很多的产品需求，做好这些需求设计之后，就得他们的产品总监和其他产品内部评审这份设计。产品总监认可之后的需求。产品爸爸们就会拿着需求来折磨我们这些程序员了。</p><h2 id="二、需求评审"><a href="#二、需求评审" class="headerlink" title="二、需求评审"></a>二、需求评审</h2><p>产品爸爸拉上各种开发人员，比如APP、Java后端、前端、UE交互、UI设计、QA测试等等，进行这个需求的评审。每个人对这个需求各抒己见，哪些地方不合理，哪些地方这期不适合开发等等，产品会做会议记录邮件，然后更改需求，如果改动较小，就以邮件形式通知各位开发们，如果改动较大，还需进行二次评审。</p><h2 id="三、技术方案设计"><a href="#三、技术方案设计" class="headerlink" title="三、技术方案设计"></a>三、技术方案设计</h2><p>产品爸爸发话了，那就得干啊，然后后端开始做技术详细设计，UE做交互稿，QA做测试用例，UI根据UE的交互稿做页面设计。</p><p>后端的技术方案设计非常重要，这一步其实是对产品业务的一个梳理过程，让你能够更加了解业务需求，在设计的过程中能够及时发现哪里不合理，哪里有风险，哪里用什么样的技术栈等等。能让你在写代码的时候，速度又快，质量又高的完成开发工作。</p><h2 id="四、技术设计评审"><a href="#四、技术设计评审" class="headerlink" title="四、技术设计评审"></a>四、技术设计评审</h2><p> 这里有几个方面需要评审，UE的交互稿，QA的测试用例，这个是需要全体人员进行参加的。而后端的技术方案设计，只需要技术leader和一些组内技术人员参加评审即可，因为其他人参加也听不懂嘛。这个技术评审能让你学到很多东西，对业务的风险把控，技术栈的选择等等，leader会针对这些给你提一些专业性的意见。所以技术方案一定要做好，这也是领导了解你的一个过程。你每次都做的很详细，很靠谱，那以后有好项目领导肯定会优先考虑交给你做。</p><h2 id="五、排期"><a href="#五、排期" class="headerlink" title="五、排期"></a>五、排期</h2><p>进入开发前要先进行工作量排期，就是工作计划安排，今天干什么，明天干什么，这个排期非常重要，排期有时候能直接影响你是996还是965， 因为严格控制排期，按照排期计划走，能让你比较从容的开发，各个环节有条不紊的进行。但是如果情况特殊，就是有好几个需求并行开发，时间都特别紧急，那排期也救不了你了。比如到了双十一大促，618大促，那都是很忙的时候。</p><h2 id="六、-开发"><a href="#六、-开发" class="headerlink" title="六、 开发"></a>六、 开发</h2><p>以上都搞完之后就可以进入真正的开发了，首先前后端要进行mock接口定义， 提供一些mock数据给前端等等，因为目前都是前后端分离的开发模式，双方定义好接口交互方式，就可以各自干活了，相当于并行开发。这样的工作效率非常高，谁也不用等谁。双方开发完之后就进入联调，前端切换成后端的真实接口，然后双方进行自测。</p><h2 id="七、-code-review"><a href="#七、-code-review" class="headerlink" title="七、 code review"></a>七、 code review</h2><p> 开发工作全部完毕之后，进入代码review阶段，这个时候一般是叫上leader和组内的其他技术人员参加，他们会根据业务背景，以及你的代码实现提出一些意见，比如这里用工厂设计模式比较好，或者这里的代码逻辑可以在优化一下等等，这个阶段也是一个非常好的学习过程，你写代码都是按照自己的知识储备和风格去写，别人从他们自己的知识储备来看你的代码，会提出不同的思路，这样你就能学习他人的一些知识。</p><h2 id="八、测试"><a href="#八、测试" class="headerlink" title="八、测试"></a>八、测试</h2><p> 以上都做完之后就进入测试阶段了，写个提测邮件给测试爸爸们，心里祈祷着千万别测试bug，结果测试爸爸们立马给你发了一条钉钉消息：英雄来干了这碗bug。测试一般分为测试环境和沙箱环境，测试环境又细分了很多子环境，比如stable环境、betaa环境、betab、betac、betad环境等，为什么要搞这么多测试环境呢，因为可能会有很多需求并行在开发，就需要很多环境来测试这些需求。一般中小型公司就没这么多环境。那么沙箱环境又是什么呢，就是模拟线上环境，几乎和线上环境是一模一样的，就是为了在上线前能够保证不出任何问题，因为上线是一件特别神圣的事，一旦出问题，你就背锅吧。测试完成后产品进行验收，产品爸爸满意了，这个时候就可以上线了。</p><h2 id="九、上线"><a href="#九、上线" class="headerlink" title="九、上线"></a>九、上线</h2><p>上线是一件非常神圣又庄严的事情，一般老哥都会先沐浴更衣之后在执行上线，因为一旦上线出问题，那就没时间洗脸洗澡了。上线前要做很多准备工作，列出一份上线清单，把上线涉及的影响点全部列出来给QA。比如是否有数据库工单，是否申请了ES索引等等，集群上线顺序，出现问题回滚顺序等等，万事俱备之后，就开始神圣的上线了。</p><h2 id="十、上线后回测"><a href="#十、上线后回测" class="headerlink" title="十、上线后回测"></a>十、上线后回测</h2><p> 不要以为上完线就万事大吉可以开溜了，QA还需要回测此次版本涉及的功能点，这个时候就得祈祷了，千万别有什么问题，要不今晚又回不去家了，如果上线出现问题不能短时间解决，最好的方法就是回滚，回滚到上一个可用版本。如果没有任何问题，这个时候产品爸爸就要登场了，来验收你的劳动成果，产品爸爸点头了就可以收拾东西回家睡觉了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、产品爸爸提需求&lt;br&gt;二、需求评审&lt;br&gt;三、技术方案设计&lt;br&gt;四、技术设计评审&lt;br&gt;五、排期&lt;br&gt;六、开发&lt;br&gt;七、code review&lt;br&gt;八、测试&lt;br&gt;九、上线&lt;br&gt;十、上线后回测&lt;/p&gt;
    
    </summary>
    
    
      <category term="项目管理" scheme="https://zhiqw.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>xdebug+webgrind对php5.6做性能分析环境搭建</title>
    <link href="https://zhiqw.github.io/2020/06/27/php/xdebug-webgrind/"/>
    <id>https://zhiqw.github.io/2020/06/27/php/xdebug-webgrind/</id>
    <published>2020-06-27T05:29:48.000Z</published>
    <updated>2021-06-18T14:22:11.537Z</updated>
    
    <content type="html"><![CDATA[<p>python3环境搭建<br>xdebug扩展安装</p><a id="more"></a><h1 id="python3安装"><a href="#python3安装" class="headerlink" title="python3安装"></a>python3安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.7.7&#x2F;Python-3.7.7.tar.xz</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;code&#x2F;python3</span><br><span class="line">tar -xvf Python-3.7.7.tar.xz -C &#x2F;usr&#x2F;local&#x2F;code</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;code&#x2F;Python-3.7.7&#x2F; &amp;&amp; .&#x2F;configure prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;python3</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;python3 &#x2F;usr&#x2F;bin&#x2F;python3</span><br></pre></td></tr></table></figure><h1 id="dot命令安装"><a href="#dot命令安装" class="headerlink" title="dot命令安装"></a>dot命令安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install graphviz</span><br></pre></td></tr></table></figure><h1 id="xdebug安装"><a href="#xdebug安装" class="headerlink" title="xdebug安装"></a>xdebug安装</h1><blockquote><p><a href="https://xdebug.org/docs/install">https://xdebug.org/docs/install</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pecl install xdebug</span><br><span class="line"></span><br><span class="line">mkdir -p &#x2F;tmp&#x2F;xdebug</span><br><span class="line">chown -R www:www &#x2F;tmp&#x2F;xdebug&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;修改php.ini</span><br><span class="line">zend_extension&#x3D;xdebug.so</span><br><span class="line">[xdebug]</span><br><span class="line">xdebug.profiler_append&#x3D;0</span><br><span class="line">xdebug.profiler_output_name&#x3D;&quot;cachegrind.out.%R%u&quot;</span><br><span class="line">xdebug.profiler_enable&#x3D;On</span><br><span class="line">xdebug.profiler_output_dir&#x3D;&quot;&#x2F;tmp&#x2F;xdebug&#x2F;&quot;</span><br><span class="line">xdebug.profiler_enable_trigger&#x3D;On</span><br></pre></td></tr></table></figure><h1 id="webgrind可视化界面"><a href="#webgrind可视化界面" class="headerlink" title="webgrind可视化界面"></a>webgrind可视化界面</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;jokkedk&#x2F;webgrind.git</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;修改config.php修改成</span><br><span class="line">static $storageDir &#x3D; &#39;&#x2F;tmp&#x2F;xdebug&#x2F;&#39;;</span><br><span class="line">static $profilerDir &#x3D; &#39;&#x2F;tmp&#x2F;xdebug&#x2F;&#39;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python3环境搭建&lt;br&gt;xdebug扩展安装&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="https://zhiqw.github.io/categories/php/"/>
    
    
      <category term="swoole" scheme="https://zhiqw.github.io/tags/swoole/"/>
    
      <category term="easyswoole" scheme="https://zhiqw.github.io/tags/easyswoole/"/>
    
  </entry>
  
  <entry>
    <title>压测AB以及监控工具详解</title>
    <link href="https://zhiqw.github.io/2020/06/27/tool/pressure-test/"/>
    <id>https://zhiqw.github.io/2020/06/27/tool/pressure-test/</id>
    <published>2020-06-26T17:38:07.000Z</published>
    <updated>2021-06-18T14:22:11.538Z</updated>
    
    <content type="html"><![CDATA[<p>ab命令参数</p><p>查看cpu和内存使用率top</p><p>iostat 查看硬盘带宽命令</p><a id="more"></a><h1 id="客户端压测工具AB"><a href="#客户端压测工具AB" class="headerlink" title="客户端压测工具AB"></a>客户端压测工具AB</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab(选项)(参数) 地址</span><br></pre></td></tr></table></figure><blockquote><p>-A：指定连接服务器的基本的认证凭据；<br>-c：指定一次向服务器发出请求数；<br>-C：添加cookie；<br>-g：将测试结果输出为“gnuolot”文件；<br>-h：显示帮助信息；<br>-H：为请求追加一个额外的头；<br>-i：使用“head”请求方式；<br>-k：激活HTTP中的“keepAlive”特性；<br>-n：指定测试会话使用的请求数；<br>-p：指定包含数据的文件；<br>-q：不显示进度百分比；<br>-T：使用POST数据时，设置内容类型头；<br>-v：设置详细模式等级；<br>-w：以HTML表格方式打印结果；<br>-x：以表格方式输出时，设置表格的属性；<br>-X：使用指定的代理服务器发送请求；<br>-y：以表格方式输出时，设置表格属性。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -c 200 -n 200 http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1748469 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http:&#x2F;&#x2F;www.zeustech.net&#x2F;</span><br><span class="line">Licensed to The Apache Software Foundation, http:&#x2F;&#x2F;www.apache.org&#x2F;</span><br><span class="line"></span><br><span class="line">Benchmarking 127.0.0.1 (be patient)</span><br><span class="line">Completed 100 requests</span><br><span class="line">Completed 200 requests</span><br><span class="line">Finished 200 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:</span><br><span class="line">Server Hostname:        127.0.0.1       #域名</span><br><span class="line">Server Port:            3000            #请求端口号</span><br><span class="line"></span><br><span class="line">Document Path:          &#x2F;               #文件路径</span><br><span class="line">Document Length:        11 bytes        #页面字节数</span><br><span class="line"></span><br><span class="line">Concurrency Level:      200             #请求的并发数</span><br><span class="line">Time taken for tests:   0.192 seconds   #总访问时间</span><br><span class="line">Complete requests:      200             #请求成功数量</span><br><span class="line">Failed requests:        0               #请求失败数量</span><br><span class="line">Total transferred:      29400 bytes     #请求总数据大小（包括header头信息）</span><br><span class="line">HTML transferred:       2200 bytes      #html页面实际总字节数</span><br><span class="line">Requests per second:    1041.68 [#&#x2F;sec] (mean)   #每秒多少请求</span><br><span class="line">Time per request:       191.998 [ms] (mean)      #用户平均请求等待时间 </span><br><span class="line">Time per request:       0.960 [ms] (mean, across all concurrent requests)    # 服务器平均处理时间</span><br><span class="line">Transfer rate:          149.54 [Kbytes&#x2F;sec] received    #每秒获取的数据长度</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+&#x2F;-sd] median   max</span><br><span class="line">Connect:        0    0   0.3      0       1</span><br><span class="line">Processing:     9   94  49.2     95     179</span><br><span class="line">Waiting:        3   90  51.0     91     178</span><br><span class="line">Total:          9   95  49.2     95     179</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%     95   #50%用户请求在95ms内返回</span><br><span class="line">  66%    122   #66%用户请求在122ms内返回</span><br><span class="line">  75%    138   #75%用户请求在138ms内返回</span><br><span class="line">  80%    146   #80%用户请求在146ms内返回</span><br><span class="line">  90%    163   #90%用户请求在163ms内返回</span><br><span class="line">  95%    171   #95%用户请求在171ms内返回</span><br><span class="line">  98%    176   #98%用户请求在176ms内返回</span><br><span class="line">  99%    178   #99%用户请求在178ms内返回</span><br><span class="line"> 100%    179 (longest request)</span><br></pre></td></tr></table></figure><blockquote><p><code>Requests per second:    1041.68 [#/sec] (mean)</code> （吞吐率，简称QPS）每秒服务器承载请求量是多少，以上测试数据表示每秒可以处理 <code>1041.68</code>并发量，也就是说有 1100个用户去访问这个服务器，这个服务器是可以抗的住<br><code>Time per request:       191.998 [ms] (mean)</code> 每次请求花费多少毫秒<br><code>Time per request:       0.960 [ms] (mean, across all concurrent requests)</code>并发情况下，0.960毫秒得到结果<br><code>Transfer rate:          149.54 [Kbytes/sec] received</code>(吞吐量) 每秒这个服务器吞/吐的数据量是多少</p></blockquote><h1 id="性能分析工具"><a href="#性能分析工具" class="headerlink" title="性能分析工具"></a>性能分析工具</h1><h2 id="Node自带-profile"><a href="#Node自带-profile" class="headerlink" title="Node自带 profile"></a>Node自带 profile</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --prof index.js</span><br></pre></td></tr></table></figure><h2 id="php分析工具xdebug-webgrind"><a href="#php分析工具xdebug-webgrind" class="headerlink" title="php分析工具xdebug+webgrind"></a>php分析工具xdebug+webgrind</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pecl install xdebug</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;jokkedk&#x2F;webgrind.git</span><br></pre></td></tr></table></figure><h2 id="php分析工具-xhprof"><a href="#php分析工具-xhprof" class="headerlink" title="php分析工具 xhprof"></a>php分析工具 xhprof</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;pecl.php.net&#x2F;package&#x2F;xhprof</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;tideways&#x2F;php-xhprof-extension</span><br></pre></td></tr></table></figure><h1 id="服务端监控"><a href="#服务端监控" class="headerlink" title="服务端监控"></a>服务端监控</h1><p>客户端服务端也需要开启监控，检测具体问题所在</p><h2 id="查看cpu和内存使用率"><a href="#查看cpu和内存使用率" class="headerlink" title="查看cpu和内存使用率"></a>查看cpu和内存使用率</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_4_centos ~]# top</span><br><span class="line">top - 01:19:19 up 6 days, 9 min,  1 user,  load average: 0.00, 0.01, 0.05</span><br><span class="line">Tasks: 122 total,   1 running, 121 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.2 us,  0.2 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem :  3880224 total,   235108 free,   973224 used,  2671892 buff&#x2F;cache</span><br><span class="line">KiB Swap:        0 total,        0 free,        0 used.  2615988 avail Mem </span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                              </span><br><span class="line">    1 root      20   0   43692   3692   2288 S   0.0  0.1   0:32.31 systemd</span><br></pre></td></tr></table></figure><blockquote><p>第一行：概况</p><ol><li>当前时间 <code>01:19:19</code>；</li><li>从本次开机到现在经过的时间 <code>up 6 days,9 min</code>；</li><li>当前有几个用户登录到该机器。<code>1 user</code>  ；</li><li>系统1分钟、5分钟、15分钟内的平均负载值<code>load average: 0.00, 0.01, 0.05</code></li></ol><p>第二行：进程计数（Tasks）</p><ol><li>进程总数<code>122 total</code>；</li><li>正在运行的进程数<code>1 running</code>；</li><li>睡眠的进程数<code>121 sleeping</code>；</li><li>停止的进程数<code>0 stopped</code>；</li><li>僵尸进程数<code>0 zombie</code></li></ol><p>第三行：CPU使用率（%Cpu(s)）</p><ol><li>进程在用户空间（user）消耗的CPU时间占比，不包含调整过优先级的进程。<code>%Cpu(s):  0.2 us</code></li><li>进程在内核空间（system）消耗的CPU时间占比。<code>0.2 sy</code></li><li>调整过用户态优先级的（niced）进程的CPU时间占比。<code>0.0 ni</code></li><li>空闲的（idle）CPU时间占比。<code>99.7 id</code></li><li>等待（wait）I/O完成的CPU时间占比。<code>0.0 wa</code></li><li>处理硬中断（hardware interrupt）的CPU时间占比。<code>0.0 hi</code></li><li>处理软中断（software interrupt）的CPU时间占比。<code>0.0 si</code></li><li>当Linux系统是在虚拟机中运行时，等待CPU资源的时间（steal time）占比。<code>0.0 st</code></li></ol><p>第四、五行：物理内存和交换空间（Mem/Swap）</p><ol><li>内存总量。<code>3880224 total</code></li><li>空闲内存量。<code>235108 free</code></li><li>使用中的内存量。<code>973224 used</code></li><li>缓存和page cache占用的内存量。<code>2671892 buff/cache</code> </li></ol><p>接下来就是进程详细信息</p><ol><li><code>PID</code>进程ID</li><li><code>USER</code>进程所有者的用户名。</li><li><code>PR</code>从系统内核角度看的进程调度优先级。</li><li><code>NI</code>进程的nice值，即从用户空间角度看的进程优先级。值越低，优先级越高。</li><li><code>VIRT</code>进程申请使用的虚拟内存量。</li><li><code>RES</code>进程使用的驻留内存（即未被swap out的内存）量。</li><li><code>SHR</code>进程使用的共享内存量。</li><li><code>S</code>进程状态。R=running，S=interruptible sleeping，D=uninterruptible sleeping，T=stopped，Z=zombie。</li><li><code>%CPU</code>进程在一个更新周期内占用的CPU时间比例。</li><li><code>%MEM</code>进程占用的物理内存比例。</li><li><code>TIME+</code>进程创建后至今占用的CPU时间长度。</li><li><code>COMMAND</code>运行进程使用的命令。</li></ol></blockquote><h2 id="iostat-查看硬盘带宽命令"><a href="#iostat-查看硬盘带宽命令" class="headerlink" title="iostat 查看硬盘带宽命令"></a>iostat 查看硬盘带宽命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_4_centos ~]# yum install -y sysstat</span><br><span class="line">[root@VM_0_4_centos ~]# iostat</span><br><span class="line">Linux 3.10.0-1062.18.1.el7.x86_64 (VM_0_4_centos) 06&#x2F;27&#x2F;2020 _x86_64_(2 CPU)</span><br><span class="line"></span><br><span class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">           0.35    0.00    0.20    0.09    0.00   99.35</span><br><span class="line">           </span><br><span class="line">Device:            tps    kB_read&#x2F;s    kB_wrtn&#x2F;s    kB_read    kB_wrtn</span><br><span class="line">vda               3.10         3.39        22.73    1758510   11783276</span><br><span class="line">vdb               1.69         5.79        14.56    3001589    7547888</span><br><span class="line">scd0              0.00         0.00         0.00        910          0</span><br></pre></td></tr></table></figure><blockquote><p>%user：CPU处在用户模式下的时间百分比。</p><p>%nice：CPU处在带NICE值的用户模式下的时间百分比。</p><p>%system：CPU处在系统模式下的时间百分比。</p><p>%iowait：CPU等待输入输出完成时间的百分比。</p><p>%steal：管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比。</p><p>%idle：CPU空闲时间百分比。</p><p>tps：该设备每秒的传输次数</p><p>kB_read/s：每秒从设备（drive expressed）读取的数据量；</p><p>kB_wrtn/s：每秒向设备（drive expressed）写入的数据量；</p><p>kB_read： 读取的总数据量；</p><p>kB_wrtn：写入的总数量数据量；</p></blockquote><p>注意：</p><blockquote><p>如果%iowait的值过高，表示硬盘存在I/O瓶颈</p><p>如果%idle值高，表示CPU较空闲</p><p>如果%idle值高但系统响应慢时，可能是CPU等待分配内存，应加大内存容量。</p><p>如果%idle值持续低于10，表明CPU处理能力相对较低，系统中最需要解决的资源是CPU。</p></blockquote><p>常见命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 每隔2秒刷新显示，且显示3次</span><br><span class="line">iostat 2  3</span><br><span class="line"></span><br><span class="line"># 显示指定磁盘信息</span><br><span class="line">iostat -d &#x2F;dev&#x2F;vdb1</span><br><span class="line"></span><br><span class="line"># 显示tty和cpu信息</span><br><span class="line">iostat -t</span><br><span class="line"></span><br><span class="line"># 以M为单位显示所有信息</span><br><span class="line">iostat -m</span><br><span class="line"></span><br><span class="line"># 查看设备使用率（%util）、响应时间（await）</span><br><span class="line">iostat -d -x -k 1 1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ab命令参数&lt;/p&gt;
&lt;p&gt;查看cpu和内存使用率top&lt;/p&gt;
&lt;p&gt;iostat 查看硬盘带宽命令&lt;/p&gt;
    
    </summary>
    
    
      <category term="运维" scheme="https://zhiqw.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>Easyswoole中实现think-template模板引擎使用</title>
    <link href="https://zhiqw.github.io/2020/06/23/php/easyswoole-think-template/"/>
    <id>https://zhiqw.github.io/2020/06/23/php/easyswoole-think-template/</id>
    <published>2020-06-23T05:00:48.000Z</published>
    <updated>2021-06-18T14:22:11.537Z</updated>
    
    <content type="html"><![CDATA[<p>五步走，在easyswoole中使用think-template模板引擎</p><ol><li><p>安装</p></li><li><p>基础功能实现</p></li><li><p>mainServerCreate函数注册初始化</p></li><li><p>在控制器中使用</p></li><li><p>模版渲染文件</p></li></ol><a id="more"></a><p>详细语言描述看官网：<a href="https://www.easyswoole.com/Cn/Components/template.html">https://www.easyswoole.com/Cn/Components/template.html</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">composer require easyswoole&#x2F;template</span><br><span class="line">composer require topthink&#x2F;think-template</span><br></pre></td></tr></table></figure><h1 id="基础类实现"><a href="#基础类实现" class="headerlink" title="基础类实现"></a>基础类实现</h1><p><code>App/Providers/ThinkTpl.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace App\Providers;</span><br><span class="line">use EasySwoole\Template\RenderInterface;</span><br><span class="line">class ThinkTpl implements RenderInterface</span><br><span class="line">&#123;</span><br><span class="line">    protected $template;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;template &#x3D; new  \think\Template([</span><br><span class="line">            &#39;view_path&#39;&#x3D;&gt;EASYSWOOLE_ROOT.&#39;&#x2F;App&#x2F;Views&#x2F;&#39;,</span><br><span class="line">            &#39;cache_path&#39;&#x3D;&gt;EASYSWOOLE_ROOT.&#39;&#x2F;Temp&#x2F;runtime&#x2F;&#39;,</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">    public function render(string $template, array $data &#x3D; [], array $options &#x3D; []): ?string</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO: Implement render() method.</span><br><span class="line">        ob_start();</span><br><span class="line">        $this-&gt;template-&gt;assign($data);</span><br><span class="line">        $this-&gt;template-&gt;fetch($template);</span><br><span class="line">        $content &#x3D; ob_get_contents() ;</span><br><span class="line">        return $content;</span><br><span class="line">    &#125;</span><br><span class="line">    public function afterRender(?string $result, string $template, array $data &#x3D; [], array $options &#x3D; [])</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO: Implement afterRender() method.</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function onException(\Throwable $throwable): string</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO: Implement onException() method.</span><br><span class="line">        $msg &#x3D; &quot;&#123;$throwable-&gt;getMessage()&#125; at file:&#123;$throwable-&gt;getFile()&#125; line:&#123;$throwable-&gt;getLine()&#125;&quot;;</span><br><span class="line">        trigger_error($msg);</span><br><span class="line">        return $msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="mainServerCreate函数注册初始化"><a href="#mainServerCreate函数注册初始化" class="headerlink" title="mainServerCreate函数注册初始化"></a>mainServerCreate函数注册初始化</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use EasySwoole\Template\Render;</span><br><span class="line">use App\Providers\ThinkTpl;</span><br><span class="line"></span><br><span class="line">$render &#x3D; Render::getInstance();</span><br><span class="line">$render-&gt;getConfig()-&gt;setRender(new ThinkTpl());</span><br><span class="line">$render-&gt;attachServer(ServerManager::getInstance()-&gt;getSwooleServer());</span><br></pre></td></tr></table></figure><h1 id="控制器使用"><a href="#控制器使用" class="headerlink" title="控制器使用"></a>控制器使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 该方法放在控制器基类中，为以后提供方便</span><br><span class="line">public function fetch($tpl&#x3D;&#39;&#39;, $data&#x3D;[])&#123;</span><br><span class="line">    if($tpl &#x3D;&#x3D; &#39;&#39;)&#123;</span><br><span class="line">    $tpl &#x3D; $this-&gt;getActionName();</span><br><span class="line">    &#125;</span><br><span class="line">    $this-&gt;response()-&gt;write(Render::getInstance()-&gt;render($tpl,$data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在某个控制器中的index方法</span><br><span class="line">public function index()</span><br><span class="line">&#123;</span><br><span class="line">return $this-&gt;fetch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面渲染<code>App/Views/index.html</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;easyswoole think-template&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> Hello EasySwoole think-template</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;五步走，在easyswoole中使用think-template模板引擎&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基础功能实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mainServerCreate函数注册初始化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在控制器中使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模版渲染文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="php" scheme="https://zhiqw.github.io/categories/php/"/>
    
    
      <category term="swoole" scheme="https://zhiqw.github.io/tags/swoole/"/>
    
      <category term="easyswoole" scheme="https://zhiqw.github.io/tags/easyswoole/"/>
    
  </entry>
  
</feed>
